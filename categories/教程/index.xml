<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 on 老胡的储物柜</title>
    <link>https://www.howie6879.com/categories/%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in 教程 on 老胡的储物柜</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 18 Apr 2023 21:39:47 +0800</lastBuildDate><atom:link href="https://www.howie6879.com/categories/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于 Azure OpenAI 免费注册使用 ChatGPT 教程</title>
      <link>https://www.howie6879.com/post/2023/06_use_chatgpt_base_on_azure_openai/</link>
      <pubDate>Tue, 18 Apr 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/06_use_chatgpt_base_on_azure_openai/</guid>
      <description>这会是一个关于 ChatGPT 的系列文章，主要记录老胡日常使用 ChatGPT 的思考和一些有趣的开源项目，然后这些信息我都会汇总到一个 ChatGPT 信息群(免费，目的是为了交流)，有兴趣的朋友可以联系我进群 🥳。 目前，大部分朋友使用 ChatGPT 还是挺麻烦的，需要原生 IP 代理注册、扫码、搭建代理服务让国内可以访问等等（详细可以看之前的</description>
    </item>
    
    <item>
      <title>Web LLM👉让你在浏览器中体验基于 LLM 的聊天机器人</title>
      <link>https://www.howie6879.com/post/2023/05_deploy_web_llm/</link>
      <pubDate>Sun, 16 Apr 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/05_deploy_web_llm/</guid>
      <description>这会是一个关于 ChatGPT 的系列文章，主要记录日常使用 ChatGPT 的感想和相关信息以及有趣的开源项目，然后这些信息我都会汇总到一个 ChatGPT 信息群，有兴趣的朋友可以文末加入 🥳。 Web LLM 将大型语言模型和基于 LLM 的聊天机器人引入 Web 浏览器。让一切都在浏览器内运行而无需服务器支持（使用 WebGPU 加速）。 这无疑产生了许多有趣的机会</description>
    </item>
    
    <item>
      <title>ChatGPT 开源应用月度排名</title>
      <link>https://www.howie6879.com/post/2023/04_chatgpt_month_rank/</link>
      <pubDate>Wed, 05 Apr 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/04_chatgpt_month_rank/</guid>
      <description>这会是一个关于 ChatGPT 的系列文章，主要记录日常使用 ChatGPT 的感想和相关信息以及有趣的开源项目，然后这些信息我都会汇总到一个 ChatGPT 信息群，有兴趣的朋友可以文末加入🥳。 最火热的 ChatGPT APPS 都在这了，信息来源 👉ossinsight 开源社区围绕 ChatGPT 这个核心模型，能玩出哪些花来？ 这是个很有吸引力的问题，ossins</description>
    </item>
    
    <item>
      <title>ChatGPT 从注册到自建应用</title>
      <link>https://www.howie6879.com/post/2023/03_chatgpt_register_login_tutorial/</link>
      <pubDate>Thu, 30 Mar 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/03_chatgpt_register_login_tutorial/</guid>
      <description>这会是一个关于 ChatGPT 的系列文章，主要记录日常使用 ChatGPT 的感想和相关信息以及有趣的开源项目，然后这些信息我都会汇总到一个 ChatGPT 信息群，有兴趣的朋友可以文末加入🥳 介绍 ChatGPT 是由 OpenAI 开发的一种大型自然语言处理模型，可以生成人类般的自然语言响应，让对话更加自然、流畅和智能。相较于传统的聊天机器人，Chat</description>
    </item>
    
    <item>
      <title>Z-library 稳定访问指南</title>
      <link>https://www.howie6879.com/post/2023/02_zlibrary_stable_access_guide/</link>
      <pubDate>Mon, 20 Feb 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/02_zlibrary_stable_access_guide/</guid>
      <description>Z-library 是一个影子图书馆，用户可在此网站上下载期刊以及各种类型的书籍。 近期，常用 Z-library 的各位应该都知晓，Z-library 近期被美国执法机构查封，基本上之前的访问地址都被停掉了（现在也算回归了，但是门槛高了起来，有必要探索更多的访问形式）。 我花了点时间了解了下如何更方便的访问 Z-library ，最后总结了</description>
    </item>
    
    <item>
      <title>我的图床解决方案，超详细！</title>
      <link>https://www.howie6879.com/post/2022/05_pic-url-solution/</link>
      <pubDate>Thu, 31 Mar 2022 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2022/05_pic-url-solution/</guid>
      <description>图床就是将你的本地图片上传到相关服务商或者个人服务器，然后获取图片对应的网络访问地址，使用者可以方便快速的将图片插入到文章中，后续图片二次使用、迁移、分享都会非常简单。 我之前常用的图床方案是使用Gitee的仓库来实现，我的博客、周刊以及一些开源电子书都用的是Gitee。 最近，Gi</description>
    </item>
    
    <item>
      <title>基于Whoogle自建无广告、无追踪的搜索引擎</title>
      <link>https://www.howie6879.com/post/2021/27_whoogle_search/</link>
      <pubDate>Wed, 01 Dec 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/27_whoogle_search/</guid>
      <description>我在周刊项目第003期 (08-30~09-03)中介绍了一个开源的元搜索引擎项目whoogle-search，这个项目有几个非常吸引我的特性： 没有广告以及赞助内容 不追踪个人IP Tor &amp;amp; HTTP/SOCKS 支持 设置 No JS&amp;amp;Cookie 易部署 更多特性去项目地址查看 到目前我差不多用了三个月，完全满足我日常使用需求，也很少用</description>
    </item>
    
    <item>
      <title>JupyterLab使用教程：程序员的笔记本神器v2.0</title>
      <link>https://www.howie6879.com/post/2021/26_jupyterlabv2_tutorial-/</link>
      <pubDate>Mon, 15 Nov 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/26_jupyterlabv2_tutorial-/</guid>
      <description>之前写过一份JupyterLab的使用教程，但是随着个人使用时间的增加和更多优秀插件的出现，断断续续我基于JupyterLab:v3.0+衍生出了自己的最佳实践，本篇文章将从以下方面更加全面地介绍JupyterLab： 搭建安装 基本功能 插件推荐 容器化最佳实践 最终成品如下图所示，有兴</description>
    </item>
    
    <item>
      <title>Liuli 使用教程</title>
      <link>https://www.howie6879.com/post/2021/11_2c_quick_start/</link>
      <pubDate>Sun, 11 Apr 2021 21:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/11_2c_quick_start/</guid>
      <description>2C的目的是为了构建一个多源（公众号、RSS）、干净、个性化的阅读环境，如果你在公众号阅读体验下深切感受到对于广告的无奈，那么这个项目就是你需要的，一起看看怎么安装部署2C吧。 开始 2C项目对于一些基础环境是有一点要求的，为了尽可能减少开发者部署使用的复杂度（特别是非Python开</description>
    </item>
    
    <item>
      <title>Ruia异步爬虫框架——快速开始</title>
      <link>https://www.howie6879.com/post/2021/10_ruia_quick_start/</link>
      <pubDate>Sun, 04 Apr 2021 21:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/10_ruia_quick_start/</guid>
      <description>基于Ruia快速实现一个以Hacker News为目标的爬虫 本文主要通过对Hacker News的爬取示例来展示如何使用Ruia，下图红框中的数据就是爬虫脚本需要爬取的目标： 开始前的准备工作： 确定已经安装Ruia：pip install ruia -U 确定可以访问Hacker News 第一步：定义 Item Item的目的是定</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[04.配置应用程序]</title>
      <link>https://www.howie6879.com/post/2021/07_k8s_note_04_configmap/</link>
      <pubDate>Thu, 18 Mar 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/07_k8s_note_04_configmap/</guid>
      <description>使用Docker部署应用程序时，一般常用的配置方式有： 配置内嵌 启动传参配置 环境变量 经过前面容器持久化存储的介绍，我们很容易能想到是以挂载卷的形式，比如： gitRepo hostPath NFS 再结合边车模式来进行配置文件的管控是可行的，然而有一种更加简便的方法能将配置数据置于Kubernetes的顶级资源对象中，</description>
    </item>
    
    <item>
      <title>设计模式——基于容器的分布式系统</title>
      <link>https://www.howie6879.com/post/2021/06_design_patterns_for_container-based_distributed_systems/</link>
      <pubDate>Thu, 11 Mar 2021 22:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/06_design_patterns_for_container-based_distributed_systems/</guid>
      <description>20世纪80年代末至90年代初，面向对象编程思想给软件开发带来了一轮技术革新，就像润物细无声的春雨那般，向全世界的程序员们快速普及了模块化构建应用程序的方法，一直流行至今。 当下，我们可以看到类似的革新出现在了分布式系统开发，具体特点如下： 基于容器的微服务架构体系日益流行 容器天然隔</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[03.容器持久化存储]</title>
      <link>https://www.howie6879.com/post/2021/05_k8s_note_03_container_persistence/</link>
      <pubDate>Thu, 04 Mar 2021 22:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/05_k8s_note_03_container_persistence/</guid>
      <description>容器的本质是进程，对于进程，Linux系统有进程组的概念来将其组织在一起。在k8s里面，使用Pod这个逻辑概念来维护容器间的关系。 有了Pod后，我们的应用程序需要被创建和管理，这就引出了ReplicaSet和Deployment；然后需要将部署好的应用暴露给外部进行访问，Serv</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[02.概念介绍]</title>
      <link>https://www.howie6879.com/post/2021/02_k8s_note_02_basic_concept/</link>
      <pubDate>Mon, 11 Jan 2021 22:17:08 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/02_k8s_note_02_basic_concept/</guid>
      <description>俗话说，磨刀不误砍柴工。上一章，我们成功搭建了k8s集群，接下来我们主要花时间了解一下k8s的相关概念，为后续掌握更高级的知识提前做好准备。 本文主要讲解以下四个概念： Pod Deployment Service Namespace 引入 让我们使用Deployment运行一个无状态应用来开启此章节吧，比如运行一个nginx Deployme</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[01.走进Kubernetes]</title>
      <link>https://www.howie6879.com/post/2021/01_k8s_note_01_installation/</link>
      <pubDate>Mon, 11 Jan 2021 22:16:42 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/01_k8s_note_01_installation/</guid>
      <description>什么是Kubernetes 随着微服务架构被越来越多的公司使用，大部分单体应用正逐步被拆解成小的、独立运行的微服务。微服务的优势这里不做探讨，但是其带来的服务维护问题大大增加，若想要在管理大量微服务的情况下还需要让资源利用率更多且硬件成本相对更低，那么基于容器部署的微服务的一些自动</description>
    </item>
    
    <item>
      <title>JupyterLab使用教程：程序员的笔记本神器v1.0</title>
      <link>https://www.howie6879.com/post/2019/04_how_to_use_jupyterlab/</link>
      <pubDate>Wed, 20 Mar 2019 13:37:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/04_how_to_use_jupyterlab/</guid>
      <description>JupyterLab对于Jupyter Notebook有着完全的支持 JupyterLab是一个交互式的开发环境，是jupyter notebook的下一代产品，集成了更多的功能，等其正式版发布，相信那时就是jupyter notebook被取代的时候 通过使用JupyterLab，能够</description>
    </item>
    
    <item>
      <title>如何用PEP 8编写优雅的Python代码</title>
      <link>https://www.howie6879.com/post/2018/08_how-to-write-beautiful-python-code-with-pep-8/</link>
      <pubDate>Wed, 26 Dec 2018 09:07:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/08_how-to-write-beautiful-python-code-with-pep-8/</guid>
      <description>原文地址：How to Write Beautiful Python Code With PEP 8 作者：Jasmine Finer 翻译：howie6879 PEP 8有时候读作PEP8 或者PEP-8，是一份提供如何编写Python代码指南和最佳实践的文档，由Guido van Rossum, Barry Warsaw, Nick Coghlan在2001年完成。PEP 8主要注重于提高 Python 代码的可读性和一致性。 PEP全</description>
    </item>
    
    <item>
      <title>博客升级HTTPS方案</title>
      <link>https://www.howie6879.com/post/2018/03_update-https-for-blog/</link>
      <pubDate>Thu, 24 May 2018 11:40:18 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/03_update-https-for-blog/</guid>
      <description>很早就想将博客升级为HTTPS，在心中也确立了方案，步骤也很简单： 博文上传至Git Caddy结合Webhook自动更新，顺便上HTTPS 流程很简单，麻烦在于需要Caddy以及Webhook的设置，然后一台服务器也是必须的，这里本人推荐使用搬瓦工的年付19.9$方案，购买之后，选择</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 6.常用的技巧</title>
      <link>https://www.howie6879.com/post/2018/02_sanic-for-pythoneer-06/</link>
      <pubDate>Sat, 13 Jan 2018 19:12:30 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/02_sanic-for-pythoneer-06/</guid>
      <description>结合前面讲的配置、项目结构、页面渲染、数据库连接，构造一个优雅的Sanic应用对你来说估计没什么大问题了，但是在实际使用过程中，可能你会碰到各种各样的需求，与之对应，你也会遇到千奇百怪的问题，除了在官方pro提issue，你大部分问题都需要自己去面对，看官方的介绍大概就可以明白S</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 5.数据库使用</title>
      <link>https://www.howie6879.com/post/2018/01_sanic-for-pythoneer-05/</link>
      <pubDate>Fri, 12 Jan 2018 10:50:30 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/01_sanic-for-pythoneer-05/</guid>
      <description>介绍中说的很明白，Sanic 是一个可以使用 async/await 语法编写项目的异步非阻塞框架，既然是异步框架，那么在使用过程中用到的第三方包也最好是异步的，比如http请求，最好就使用aihttp而非requests，对于数据库的连接，也是同样如此，下面我将用代码的形式来说明下如何在Sanic中连接</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 4.展示一个页面</title>
      <link>https://www.howie6879.com/post/2018/00_sanic-for-pythoneer-04/</link>
      <pubDate>Fri, 05 Jan 2018 09:20:14 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/00_sanic-for-pythoneer-04/</guid>
      <description>前面一节介绍项目结构的时候，很粗略地讲了下如何将rss的文章内容在网页上进行展示。 相信你应该已经了解清楚，sanic是怎么接收请求并返回被请求的资源的，简单来说概括如下： 接收请求 找到对应的路由并执行路由对应的视图函数 Jinja2模板渲染返回视图 路由和视图函数 在此我假设你理解 python 中的</description>
    </item>
    
    <item>
      <title>Sanic 源码阅读 - 基于0.1.2</title>
      <link>https://www.howie6879.com/post/2017/15_sanic-for-pythoneer-source-code-read/</link>
      <pubDate>Wed, 20 Dec 2017 10:10:49 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/15_sanic-for-pythoneer-source-code-read/</guid>
      <description>Sanic是一个可以使用async/await语法编写项目的异步非阻塞框架，它写法类似于Flask，但使用了异步特性，而且还使用uvloop作为事件循环，其底层使用的是libuv，从而使 Sanic的速度优势更加明显。 如果你： 想深入了解Sanic，迫切想知道它的运行机制 直接阅读源码</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 3.项目结构</title>
      <link>https://www.howie6879.com/post/2017/14_sanic-for-pythoneer-03/</link>
      <pubDate>Fri, 06 Oct 2017 08:04:38 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/14_sanic-for-pythoneer-03/</guid>
      <description>一个项目，在最外层他们应该是一样的，至少需要有: 文件夹 说明 docs 项目文档说明 src/pro_name 项目名称 tests 测试用例 README.md 项目介绍 requirements.txt 该项目依赖的第三方库 …&amp;hellip; …&amp;hellip; 那接下来需要讨论的，就是 src 的内部结构该是什么样的呢？ 本章将写一个 rss 解析展示的项目用做演示。 2.1.普通的项目结构 一个普通</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 2.配置</title>
      <link>https://www.howie6879.com/post/2017/13_sanic-for-pythoneer-02/</link>
      <pubDate>Fri, 06 Oct 2017 08:04:29 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/13_sanic-for-pythoneer-02/</guid>
      <description>对于一个项目来说，配置是一个很严肃的问题，比如说：在开发环境和生产环境中，配置是不同的，那么一个项目该如何自由地在不同的配置环境中进行切换呢，思考下，然后带着答案或者疑问往下阅读。 新建文件夹 demo2 ，内部建立这样的文件结构： 1 2 3 4 5 demo02 ├── config │ ├── __init__.py │ └── config.py └── run.py 其中 run.py 内容如下</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 1.初使用</title>
      <link>https://www.howie6879.com/post/2017/12_sanic-for-pythoneer-01/</link>
      <pubDate>Fri, 06 Oct 2017 08:03:15 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/12_sanic-for-pythoneer-01/</guid>
      <description>在安装Sanic之前，让我们一起来看看Python在支持异步的过程中，都经历了哪些比较重大的更新。 首先是Python3.4版本引入了asyncio，这让Python有了支持异步IO的标准库，而后3.5版本又提供了两个新的关键字 async/await，目的是为了更好地标识异步IO，</description>
    </item>
    
    <item>
      <title>gRPC使用初试</title>
      <link>https://www.howie6879.com/post/2017/09_grpc-demo/</link>
      <pubDate>Thu, 03 Aug 2017 20:57:28 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/09_grpc-demo/</guid>
      <description>1.前言 gRPC是一个开源的高性能并且能在任何环境中运行的RPC框架，其采用 protocol buffer: protocol buffer是一个用于结构化数据序列化的一个灵活的、有效率的自动化机制，类似于XML(但比其更简单、小巧且简单)，对于某个服务需要定义的数据结构，可以使用protocol buffer(proto3)</description>
    </item>
    
    <item>
      <title>sanic使用记录</title>
      <link>https://www.howie6879.com/post/2017/06_sanic-usage-record/</link>
      <pubDate>Tue, 28 Feb 2017 16:33:44 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/06_sanic-usage-record/</guid>
      <description>&lt;p&gt;在使用python异步的时候，我了解到了sanic这个据说是最快的web服务框架，其支持异步请求处理机制，这意味你可以使用python3.5的&lt;code&gt;async/await&lt;/code&gt;来编写无阻塞的异步程序。
于是我利用业余时间使用&lt;a href=&#34;https://github.com/channelcat/sanic&#34;&gt;sanic&lt;/a&gt;编写了这个项目。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python之装饰器</title>
      <link>https://www.howie6879.com/post/2016/05_about-python-decorator/</link>
      <pubDate>Sun, 31 Jul 2016 20:24:53 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/05_about-python-decorator/</guid>
      <description>认识装饰器 在python中，对于一个函数，若想在其运行前后做点什么，那么装饰器是再好不过的选择，话不多说，上代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env # -*-coding:utf-8-*- # script: 01.py __author__ = &amp;#39;howie&amp;#39; from functools import wraps def decorator(func): @wraps(func) def wrapper(*args, **kwargs): print(&amp;#34;%s was called&amp;#34; % func.__name__) func(*args, **kwargs) return wrapper @decorator def hello(name=&amp;#34;howie&amp;#34;): print(&amp;#34;Hello %s!&amp;#34; % name) hello() outputs: hello was called Hello howie! 这段代码，初看之下，确实不是很理解，接下来一步一步分</description>
    </item>
    
    <item>
      <title>MySQL基本操作命令汇总</title>
      <link>https://www.howie6879.com/post/2016/03_mysql-tutorial/</link>
      <pubDate>Sun, 27 Mar 2016 20:21:49 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/03_mysql-tutorial/</guid>
      <description>一、基本操作 对数据库以及表的一些基本操作 1-1.关于数据库 1 2 3 4 5 6 7 8 9 10 11 12 //创建数据库 create database h_test; //查看数据库 show databases; //查看数据库信息 show create database h_test; //修改数据库的编码，可使用上一条语句查看是否修改成功 alter database h_test default character set gbk collate gbk_bin; //删除数据库 drop database h_test; //综上，可以直接创建数据库且设置编码方式</description>
    </item>
    
    <item>
      <title>Markdown简明教程</title>
      <link>https://www.howie6879.com/post/2016/02_markdown-tutorial/</link>
      <pubDate>Fri, 04 Mar 2016 20:27:02 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/02_markdown-tutorial/</guid>
      <description>1.概述 本教程的目的是让你读完本教程后，能够使用Markdown来应付一些日常的书写；Markdown的目标是实现易读易写，在这里我觉得还要加上一点，那就是易学，既然易学，那为什么还要写教程呢？因为我必须让我女朋友也学会Markdown啊，哈哈。 参考： Markdown 语法说明 使用环境：可以自己</description>
    </item>
    
  </channel>
</rss>
