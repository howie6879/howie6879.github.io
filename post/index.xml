<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 老胡的储物柜</title>
    <link>https://www.howie6879.com/post/</link>
    <description>Recent content in Posts on 老胡的储物柜</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 18 Apr 2023 21:39:47 +0800</lastBuildDate><atom:link href="https://www.howie6879.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于 Azure OpenAI 免费注册使用 ChatGPT 教程</title>
      <link>https://www.howie6879.com/post/2023/06_use_chatgpt_base_on_azure_openai/</link>
      <pubDate>Tue, 18 Apr 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/06_use_chatgpt_base_on_azure_openai/</guid>
      <description>这会是一个关于 ChatGPT 的系列文章，主要记录老胡日常使用 ChatGPT 的思考和一些有趣的开源项目，然后这些信息我都会汇总到一个 ChatGPT 信息群(免费，目的是为了交流)，有兴趣的朋友可以联系我进群 🥳。 目前，大部分朋友使用 ChatGPT 还是挺麻烦的，需要原生 IP 代理注册、扫码、搭建代理服务让国内可以访问等等（详细可以看之前的</description>
    </item>
    
    <item>
      <title>Web LLM👉让你在浏览器中体验基于 LLM 的聊天机器人</title>
      <link>https://www.howie6879.com/post/2023/05_deploy_web_llm/</link>
      <pubDate>Sun, 16 Apr 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/05_deploy_web_llm/</guid>
      <description>这会是一个关于 ChatGPT 的系列文章，主要记录日常使用 ChatGPT 的感想和相关信息以及有趣的开源项目，然后这些信息我都会汇总到一个 ChatGPT 信息群，有兴趣的朋友可以文末加入 🥳。 Web LLM 将大型语言模型和基于 LLM 的聊天机器人引入 Web 浏览器。让一切都在浏览器内运行而无需服务器支持（使用 WebGPU 加速）。 这无疑产生了许多有趣的机会</description>
    </item>
    
    <item>
      <title>ChatGPT 开源应用月度排名</title>
      <link>https://www.howie6879.com/post/2023/04_chatgpt_month_rank/</link>
      <pubDate>Wed, 05 Apr 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/04_chatgpt_month_rank/</guid>
      <description>这会是一个关于 ChatGPT 的系列文章，主要记录日常使用 ChatGPT 的感想和相关信息以及有趣的开源项目，然后这些信息我都会汇总到一个 ChatGPT 信息群，有兴趣的朋友可以文末加入🥳。 最火热的 ChatGPT APPS 都在这了，信息来源 👉ossinsight 开源社区围绕 ChatGPT 这个核心模型，能玩出哪些花来？ 这是个很有吸引力的问题，ossins</description>
    </item>
    
    <item>
      <title>ChatGPT 从注册到自建应用</title>
      <link>https://www.howie6879.com/post/2023/03_chatgpt_register_login_tutorial/</link>
      <pubDate>Thu, 30 Mar 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/03_chatgpt_register_login_tutorial/</guid>
      <description>这会是一个关于 ChatGPT 的系列文章，主要记录日常使用 ChatGPT 的感想和相关信息以及有趣的开源项目，然后这些信息我都会汇总到一个 ChatGPT 信息群，有兴趣的朋友可以文末加入🥳 介绍 ChatGPT 是由 OpenAI 开发的一种大型自然语言处理模型，可以生成人类般的自然语言响应，让对话更加自然、流畅和智能。相较于传统的聊天机器人，Chat</description>
    </item>
    
    <item>
      <title>Z-library 稳定访问指南</title>
      <link>https://www.howie6879.com/post/2023/02_zlibrary_stable_access_guide/</link>
      <pubDate>Mon, 20 Feb 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/02_zlibrary_stable_access_guide/</guid>
      <description>Z-library 是一个影子图书馆，用户可在此网站上下载期刊以及各种类型的书籍。 近期，常用 Z-library 的各位应该都知晓，Z-library 近期被美国执法机构查封，基本上之前的访问地址都被停掉了（现在也算回归了，但是门槛高了起来，有必要探索更多的访问形式）。 我花了点时间了解了下如何更方便的访问 Z-library ，最后总结了</description>
    </item>
    
    <item>
      <title>我的macOS常用软件清单</title>
      <link>https://www.howie6879.com/post/2023/01_my_awesome_mac_soft/</link>
      <pubDate>Sat, 28 Jan 2023 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2023/01_my_awesome_mac_soft/</guid>
      <description>记录我在使用 macOS 过程中使用&amp;amp;看到的软件项目，本文会持续更新，同时也开源在 GitHub，欢迎 Star 基础工具 Alfred：本地搜索及应用快速启动，替代品： Raycast：目前免费状态，这是其开源插件仓库 Cerebro：开源替代品 Karabiner-Elements：键盘键位修改神器</description>
    </item>
    
    <item>
      <title>周刊的今日推荐功能上线</title>
      <link>https://www.howie6879.com/post/2022/09.weekly_today/</link>
      <pubDate>Wed, 11 May 2022 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2022/09.weekly_today/</guid>
      <description>我的信息周刊，记录这周我看到的有价值的信息，主要针对计算机领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。 我的周刊自21-08-16日启动，自此已经写了快一年了，不出意外也会持续更新下去🥳。 和大家通知一件事，我的周刊上线了今日</description>
    </item>
    
    <item>
      <title>Liuli在树莓派上的部署教程</title>
      <link>https://www.howie6879.com/post/2022/08.liuli_deploy_on_pi/</link>
      <pubDate>Thu, 05 May 2022 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2022/08.liuli_deploy_on_pi/</guid>
      <description>Liuli的目标是帮助你一站式构建多源、干净、个性化的阅读环境，目前还在缓慢开发迭代中，欢迎更多的朋友参与进来，其当前可应用的场景有： 基于Liuli构建纯净的RSS公众号信息流 基于Liuli追更&amp;amp;阅读小说 建议使用前看一下上面的文章，有个大概印象，接下来将根据以下方式来介绍</description>
    </item>
    
    <item>
      <title>杂谈|程序员还是工程师</title>
      <link>https://www.howie6879.com/post/2022/06_coder_or_engineer/</link>
      <pubDate>Thu, 07 Apr 2022 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2022/06_coder_or_engineer/</guid>
      <description>做一名开发者，我们经常会有一些 Title，比如前端/后端/大数据工程师等。但是一般自我介绍时，都会说我是程序员，而不是工程师，程序员和工程师其实大部分时间大部分人是混着用的，这两者之间没有区别吗？ 在我看来，程序员和工程师是有本质的区别的： 程序员更多在于实现，可以说是实施者 工程师在</description>
    </item>
    
    <item>
      <title>我的图床解决方案，超详细！</title>
      <link>https://www.howie6879.com/post/2022/05_pic-url-solution/</link>
      <pubDate>Thu, 31 Mar 2022 21:39:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2022/05_pic-url-solution/</guid>
      <description>图床就是将你的本地图片上传到相关服务商或者个人服务器，然后获取图片对应的网络访问地址，使用者可以方便快速的将图片插入到文章中，后续图片二次使用、迁移、分享都会非常简单。 我之前常用的图床方案是使用Gitee的仓库来实现，我的博客、周刊以及一些开源电子书都用的是Gitee。 最近，Gi</description>
    </item>
    
    <item>
      <title>基于Liuli追更&amp;阅读小说</title>
      <link>https://www.howie6879.com/post/2022/04_build_novel_info_flow_based_on_liuli/</link>
      <pubDate>Sun, 13 Feb 2022 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2022/04_build_novel_info_flow_based_on_liuli/</guid>
      <description>Liuli历史文章介绍： 起因: 打造一个干净且个性化的公众号阅读环境 公众号应用场景：基于Liuli构建纯净的RSS公众号信息流 这次Liuli给大家带来了小说书籍阅读场景的订阅解决方案，搭建方式和之前基于Liuli构建纯净的RSS公众号信息流没什么区别。 最终效果如下图： 使用 Liuli</description>
    </item>
    
    <item>
      <title>2022开工随笔，谈幸福感</title>
      <link>https://www.howie6879.com/post/2022/03_talk_about_happy/</link>
      <pubDate>Mon, 07 Feb 2022 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2022/03_talk_about_happy/</guid>
      <description>大年初七，宜开工、收红包。 长途奔波16h才抵达厦门，春节的气息随着目的地距离的缩进而逐渐变淡，我也就这么半推半就地开始了上班生活。 开了一晚上车，也没什么精神上班，熬到下班趁着一身离愁还未散去，理性的我如今感性占上风，所以有些感想就随意写写。 我曾站在愚昧之巅，那时快乐且愚蠢，也曾跌</description>
    </item>
    
    <item>
      <title>基于Liuli构建纯净的RSS公众号信息流</title>
      <link>https://www.howie6879.com/post/2022/02_build_a_clean_wechat_rss_based_liuli/</link>
      <pubDate>Wed, 26 Jan 2022 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2022/02_build_a_clean_wechat_rss_based_liuli/</guid>
      <description>首先介绍下，Liuli是什么？这是我最近开发的一个开源项目，主要目的是为了让有阅读习惯的朋友快速构建一个多源、干净、个性化的阅读环境。 为什么叫Liuli？ Liuli原来命名为2C，后面交流群的朋友提供了琉璃这个名字，取自梅尧臣《缑山子晋祠 会善寺》中的琉璃开净界，薜荔启禅关，其寓意</description>
    </item>
    
    <item>
      <title>老胡的周刊2021年度汇总|附PDF下载</title>
      <link>https://www.howie6879.com/post/2022/01_2021_weekly_all/</link>
      <pubDate>Mon, 03 Jan 2022 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2022/01_2021_weekly_all/</guid>
      <description>在互联网时代，信息的过滤与聚合是非常重要的，作为一名程序员，我经常会浏览过程中看到各种有意思的项目、资源、软件以及一些网站，如果浏览目标让人眼前一亮，那就说明我过滤到了有意思的东西。 一般我会选择相应的软件进行记录然后聚合起来慢慢看，但随着时间流逝，一些好的资源总是错过了，或者某个</description>
    </item>
    
    <item>
      <title>基于Whoogle自建无广告、无追踪的搜索引擎</title>
      <link>https://www.howie6879.com/post/2021/27_whoogle_search/</link>
      <pubDate>Wed, 01 Dec 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/27_whoogle_search/</guid>
      <description>我在周刊项目第003期 (08-30~09-03)中介绍了一个开源的元搜索引擎项目whoogle-search，这个项目有几个非常吸引我的特性： 没有广告以及赞助内容 不追踪个人IP Tor &amp;amp; HTTP/SOCKS 支持 设置 No JS&amp;amp;Cookie 易部署 更多特性去项目地址查看 到目前我差不多用了三个月，完全满足我日常使用需求，也很少用</description>
    </item>
    
    <item>
      <title>JupyterLab使用教程：程序员的笔记本神器v2.0</title>
      <link>https://www.howie6879.com/post/2021/26_jupyterlabv2_tutorial-/</link>
      <pubDate>Mon, 15 Nov 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/26_jupyterlabv2_tutorial-/</guid>
      <description>之前写过一份JupyterLab的使用教程，但是随着个人使用时间的增加和更多优秀插件的出现，断断续续我基于JupyterLab:v3.0+衍生出了自己的最佳实践，本篇文章将从以下方面更加全面地介绍JupyterLab： 搭建安装 基本功能 插件推荐 容器化最佳实践 最终成品如下图所示，有兴</description>
    </item>
    
    <item>
      <title>🎉我的周刊|静态网站上线</title>
      <link>https://www.howie6879.com/post/2021/25_howie_weekly_site/</link>
      <pubDate>Sun, 31 Oct 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/25_howie_weekly_site/</guid>
      <description>后续我的周刊相关文章全部在此网站展现，提供专门的RSS订阅，有兴趣可以专注下。 我的信息周刊，每周记录我看到的有价值的信息，主要针对计算机领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。 我的周刊项目开始于2021-08-16，到</description>
    </item>
    
    <item>
      <title>浅谈Python项目开发&amp;管理</title>
      <link>https://www.howie6879.com/post/2021/14_about_python_env/</link>
      <pubDate>Thu, 26 Aug 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/14_about_python_env/</guid>
      <description>本文主要探讨的是个人在Python项目开发&amp;amp;管理这块的一些经验之谈，经过在团队实践后主要内容总结如下： 基础环境管理 编码标准&amp;amp;规范化 远程开发 项目脚手架 🐍 环境管理 使用Anaconda和Pipenv共同管理Python项目环境 环境管理这块是个很普遍的问题，其面临的问题如</description>
    </item>
    
    <item>
      <title>打造一个干净且个性化的公众号阅读环境</title>
      <link>https://www.howie6879.com/post/2021/12_build_a_clean_env_for_reading/</link>
      <pubDate>Sun, 09 May 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/12_build_a_clean_env_for_reading/</guid>
      <description>背景 一个月前的下班时间，当时我正在看公众号，准备感受下今天的技术文章，不愉快的事情发生了，竟然一连好几篇文档点进去都是广告，至今想起，那种心情仍旧挥散不去。 于是我产生了一个想法，为什么不构建一个干净且个性化的个人阅读环境呢？作为一名微信公众号的重度用户，公众号一直被我设为汲取知识</description>
    </item>
    
    <item>
      <title>Liuli 使用教程</title>
      <link>https://www.howie6879.com/post/2021/11_2c_quick_start/</link>
      <pubDate>Sun, 11 Apr 2021 21:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/11_2c_quick_start/</guid>
      <description>2C的目的是为了构建一个多源（公众号、RSS）、干净、个性化的阅读环境，如果你在公众号阅读体验下深切感受到对于广告的无奈，那么这个项目就是你需要的，一起看看怎么安装部署2C吧。 开始 2C项目对于一些基础环境是有一点要求的，为了尽可能减少开发者部署使用的复杂度（特别是非Python开</description>
    </item>
    
    <item>
      <title>Ruia异步爬虫框架——快速开始</title>
      <link>https://www.howie6879.com/post/2021/10_ruia_quick_start/</link>
      <pubDate>Sun, 04 Apr 2021 21:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/10_ruia_quick_start/</guid>
      <description>基于Ruia快速实现一个以Hacker News为目标的爬虫 本文主要通过对Hacker News的爬取示例来展示如何使用Ruia，下图红框中的数据就是爬虫脚本需要爬取的目标： 开始前的准备工作： 确定已经安装Ruia：pip install ruia -U 确定可以访问Hacker News 第一步：定义 Item Item的目的是定</description>
    </item>
    
    <item>
      <title>简单图解OSI七层网络模型</title>
      <link>https://www.howie6879.com/post/2021/09_the_layers_of_the_osi_model_illustrated/</link>
      <pubDate>Thu, 01 Apr 2021 21:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/09_the_layers_of_the_osi_model_illustrated/</guid>
      <description>翻译自Bradley Mitchell的《The Layers of the OSI Model Illustrated》 Open Systems Interconnection(OSI)定义了一个网络框架，其以层为单位实现了各种协议，同时会将控制权逐层传递。目前OSI主要作为教学工具被使用，其在概念上将计算机网络结构按逻辑顺序划分为7层。 较</description>
    </item>
    
    <item>
      <title>三分钟将文集转成在线电子书</title>
      <link>https://www.howie6879.com/post/2021/08_build_online_ebook/</link>
      <pubDate>Mon, 22 Mar 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/08_build_online_ebook/</guid>
      <description>下午对自己这几年写的一些博客做了些整理工作，整理完毕惊喜地发现，自己针对一些主题确实已经有了一些产出。 但是由于时间线的原因，一些主题文章的连贯性被破坏了，所以我有了将他们整理成在线电子书的想法。 题图就是我的最终成果，如果你也有类似需求，那你可以按照我的方法玩一玩。 要求 目前我可以产</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[04.配置应用程序]</title>
      <link>https://www.howie6879.com/post/2021/07_k8s_note_04_configmap/</link>
      <pubDate>Thu, 18 Mar 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/07_k8s_note_04_configmap/</guid>
      <description>使用Docker部署应用程序时，一般常用的配置方式有： 配置内嵌 启动传参配置 环境变量 经过前面容器持久化存储的介绍，我们很容易能想到是以挂载卷的形式，比如： gitRepo hostPath NFS 再结合边车模式来进行配置文件的管控是可行的，然而有一种更加简便的方法能将配置数据置于Kubernetes的顶级资源对象中，</description>
    </item>
    
    <item>
      <title>设计模式——基于容器的分布式系统</title>
      <link>https://www.howie6879.com/post/2021/06_design_patterns_for_container-based_distributed_systems/</link>
      <pubDate>Thu, 11 Mar 2021 22:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/06_design_patterns_for_container-based_distributed_systems/</guid>
      <description>20世纪80年代末至90年代初，面向对象编程思想给软件开发带来了一轮技术革新，就像润物细无声的春雨那般，向全世界的程序员们快速普及了模块化构建应用程序的方法，一直流行至今。 当下，我们可以看到类似的革新出现在了分布式系统开发，具体特点如下： 基于容器的微服务架构体系日益流行 容器天然隔</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[03.容器持久化存储]</title>
      <link>https://www.howie6879.com/post/2021/05_k8s_note_03_container_persistence/</link>
      <pubDate>Thu, 04 Mar 2021 22:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/05_k8s_note_03_container_persistence/</guid>
      <description>容器的本质是进程，对于进程，Linux系统有进程组的概念来将其组织在一起。在k8s里面，使用Pod这个逻辑概念来维护容器间的关系。 有了Pod后，我们的应用程序需要被创建和管理，这就引出了ReplicaSet和Deployment；然后需要将部署好的应用暴露给外部进行访问，Serv</description>
    </item>
    
    <item>
      <title>一站式机器学习云开发平台</title>
      <link>https://www.howie6879.com/post/2021/04_ml_cloud_dev_platform/</link>
      <pubDate>Fri, 29 Jan 2021 22:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/04_ml_cloud_dev_platform/</guid>
      <description>本篇是关于自身在机器学习这块工作经验的思考总结 我希望构建一个机器学习云开发平台，目标在于解决以下问题： 团队协作：项目管理，技术&amp;amp;业务的共享如何体现在实际解决问题的过程中； 资源调度：数据处理、模型训练； 模块共享：低代码甚至无代码； 快速开发：快速试错、实践、测试、部署； 需求-</description>
    </item>
    
    <item>
      <title>梯度下降推导</title>
      <link>https://www.howie6879.com/post/2021/03_gd_math_note/</link>
      <pubDate>Thu, 14 Jan 2021 22:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/03_gd_math_note/</guid>
      <description>以感知器为例，可以梯度下降来学习合适的权重和偏置： 假设有n个样本，第i次的实际输出为y，对于样本的预测输出可以表示为： $$ \bar{y}^i = w_1x_1^i+w_2x_2^i+&amp;hellip;+w_nx_n^i+b $$ 任意一个样本的实际输出和预测输出单个样本的误差，可以使用MES表示： $$ e^i=\frac{1}{2}(y^i-\bar{y}^i)^{2} $$ 那么所有误差的和可以表示为： $$ \begin{aligned} E &amp;amp;= e^1+e^2+&amp;hellip;+e^n \ &amp;amp;= \sum_{i=1}^ne^i \ &amp;amp;= \frac{1}{2}\sum_{i=1}^n(y^i-w^Tx^i)^2 \end{aligned} $$ 想象一下，当你从山顶往下</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[02.概念介绍]</title>
      <link>https://www.howie6879.com/post/2021/02_k8s_note_02_basic_concept/</link>
      <pubDate>Mon, 11 Jan 2021 22:17:08 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/02_k8s_note_02_basic_concept/</guid>
      <description>俗话说，磨刀不误砍柴工。上一章，我们成功搭建了k8s集群，接下来我们主要花时间了解一下k8s的相关概念，为后续掌握更高级的知识提前做好准备。 本文主要讲解以下四个概念： Pod Deployment Service Namespace 引入 让我们使用Deployment运行一个无状态应用来开启此章节吧，比如运行一个nginx Deployme</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[01.走进Kubernetes]</title>
      <link>https://www.howie6879.com/post/2021/01_k8s_note_01_installation/</link>
      <pubDate>Mon, 11 Jan 2021 22:16:42 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/01_k8s_note_01_installation/</guid>
      <description>什么是Kubernetes 随着微服务架构被越来越多的公司使用，大部分单体应用正逐步被拆解成小的、独立运行的微服务。微服务的优势这里不做探讨，但是其带来的服务维护问题大大增加，若想要在管理大量微服务的情况下还需要让资源利用率更多且硬件成本相对更低，那么基于容器部署的微服务的一些自动</description>
    </item>
    
    <item>
      <title>nndl_note: 深度神经⽹络为何很难训练</title>
      <link>https://www.howie6879.com/post/2020/02_why_are_deep_neural_networks_hard_to_train/</link>
      <pubDate>Fri, 18 Dec 2020 21:13:58 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2020/02_why_are_deep_neural_networks_hard_to_train/</guid>
      <description>消失的梯度问题 导致梯度消失的原因 在更加复杂⽹络中的不稳定梯度 其它深度学习的障碍 上一章提到了神经网络的一种普遍性，比如说不管目标函数是怎样的，神经网络总是能够对任何可能的输入得到一个近似的输出。 普遍性告诉我们神经⽹络能计算任何函数；而实际经验依据提⽰深度⽹络最能适⽤于学习能够解决许</description>
    </item>
    
    <item>
      <title>程序员如何提升个人的技术影响力</title>
      <link>https://www.howie6879.com/post/2020/01_how_programmers_improve_personal_influence/</link>
      <pubDate>Wed, 23 Sep 2020 21:00:39 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2020/01_how_programmers_improve_personal_influence/</guid>
      <description>公司组织了个内训师培训班，进入前需要面试审核，以下是我的面试分享课题，这里分享出来以作记录。 大家晚上好，我是howie6879，目前主要负责的工作是风控和画像这两块；我个人的话比较常用的语言是Python，个人技术领域主要面向后端、大数据、智能应用等领域方向。 但是今天我不准备分享</description>
    </item>
    
    <item>
      <title>程序员如何在工作中保持进步</title>
      <link>https://www.howie6879.com/post/2019/13_how_programmers_keep_progressing_at_work/</link>
      <pubDate>Sun, 29 Dec 2019 11:57:39 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/13_how_programmers_keep_progressing_at_work/</guid>
      <description>&lt;p&gt;工作，对于大部分人都是不可避免的一件事，有的人是为了生存，有的人是为了自我价值的实现，也有人是为了将来不工作而现在努力工作，出发点可能各种各样，但是工作总是大部分人不可避免的一部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nndl_note: 神经⽹络可以计算任何函数的可视化证明</title>
      <link>https://www.howie6879.com/post/2019/12_a_visual_proof_that_neural_nets_can_compute_any_function/</link>
      <pubDate>Sat, 02 Nov 2019 21:13:58 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/12_a_visual_proof_that_neural_nets_can_compute_any_function/</guid>
      <description>两个预先声明 一个输入和一个输出的普遍性 多个输入变量 S型神经元的延伸 修补阶跃函数 结论 本章其实和前面章节的关联性不大，所以大可将本章作为小短文来阅读，当然基本的深度学习基础还是要有的。 主要介绍了神经⽹络拥有的⼀种普遍性，比如说不管目标函数是怎样的，神经网络总是能够对任何可能的输入$x</description>
    </item>
    
    <item>
      <title>nndl_note: 改进神经⽹络的学习⽅法</title>
      <link>https://www.howie6879.com/post/2019/11_improving_the_way_neural_networks_learn/</link>
      <pubDate>Wed, 30 Oct 2019 19:40:02 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/11_improving_the_way_neural_networks_learn/</guid>
      <description>交叉熵代价函数 引⼊交叉熵代价函数 交叉熵的含义？源⾃哪⾥？ 过度拟合和规范化 规范化 为何规范化可以帮助减轻过度拟合 规范化的其他技术 权重初始化 如何选择神经⽹络的超参数 参考 万丈高楼平地起，反向传播是深度学习这栋大厦的基石，所以在这块花多少时间都是值得的 前面一章，我们深入理解了反向传播算法如</description>
    </item>
    
    <item>
      <title>不论微信钉钉，我写了个通用消息监控处理机器人</title>
      <link>https://www.howie6879.com/post/2019/10_monitor_os_notifications/</link>
      <pubDate>Mon, 21 Oct 2019 08:37:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/10_monitor_os_notifications/</guid>
      <description>上一篇推文中提到，我希望通过监控微信对应的聊天记录，来实现一个消息自动处理的机器人，上篇文章实现的就是自动保存感兴趣的文章到Bear。 虽说那篇文章比较实用，也有很多朋友表示喜欢，但还有不少缺陷： 对技术薄弱的朋友复现困难，项目很多配置需要手动生成，前期校验工作很多 二次开发比较困难，</description>
    </item>
    
    <item>
      <title>利用微信同步文章到Bear</title>
      <link>https://www.howie6879.com/post/2019/09_save_wechat_article_to_bear/</link>
      <pubDate>Mon, 16 Sep 2019 08:37:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/09_save_wechat_article_to_bear/</guid>
      <description>如果图片失效：见【教程&amp;amp;工具】微信同步文章到Bear 在我日常工作中，我会将各种互联网以及生活中产出的信息汇总到Bear，再通过Bear的云同步使我各个终端的信息保持一致。 以前在使用有道云笔记的时候，有个功能我很喜欢，就是当看到一篇想收藏的文章的话，就可以直接右上角发送到有</description>
    </item>
    
    <item>
      <title>nndl_note: 反向传播算法如何工作</title>
      <link>https://www.howie6879.com/post/2019/08_how_does_the_back_propagation_algorithm_work/</link>
      <pubDate>Fri, 10 May 2019 16:36:44 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/08_how_does_the_back_propagation_algorithm_work/</guid>
      <description>热⾝：神经⽹络中使⽤矩阵快速计算输出的⽅法 关于代价函数的两个假设 反向传播的四个基本方程 输出层误差的⽅程 使用下一层的误差表示当前层的误差 代价函数关于⽹络中任意偏置的改变率 代价函数关于任何⼀个权重的改变率 反向传播算法 反向传播：全局观 参考 前面一章，我们通过了梯度下降算法实现目标函数的最</description>
    </item>
    
    <item>
      <title>nndl_note: 识别手写字</title>
      <link>https://www.howie6879.com/post/2019/07_use_neural_network_recognize_handwriting/</link>
      <pubDate>Wed, 08 May 2019 16:36:44 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/07_use_neural_network_recognize_handwriting/</guid>
      <description>感知器 S型神经元 神经⽹络的架构 ⼀个简单的分类⼿写数字的⽹络 随机梯度下降算法 实现数字分类模型 参考 Neural Networks and Deep Learning 是由 Michael Nielsen 编写的开源书籍，这本书主要讲的是如何掌握神经网络的核心概念，包括现代技术的深度学习，为你将来使⽤神经网络和深度学习打下基础，以下是我的读书笔记。 神经网络是一门重要的机器</description>
    </item>
    
    <item>
      <title>oh-my-zsh：让终端飞</title>
      <link>https://www.howie6879.com/post/2019/06_oh_my_zsh/</link>
      <pubDate>Mon, 15 Apr 2019 16:16:58 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/06_oh_my_zsh/</guid>
      <description>上一次推文写了JupyterLab：程序员的笔记本神器，介绍的是如何在web端打造一个便捷的开发环境，发出后反响还不错 因此我决定再写几篇能提升程序员工作以及学习效率的文章，如果能形成一个系列那是最好~如果你有自己的效率工具以及方案，欢迎留言讨论 什么是oh-my-zsh 诸位大佬都知</description>
    </item>
    
    <item>
      <title>JupyterLab使用教程：程序员的笔记本神器v1.0</title>
      <link>https://www.howie6879.com/post/2019/04_how_to_use_jupyterlab/</link>
      <pubDate>Wed, 20 Mar 2019 13:37:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/04_how_to_use_jupyterlab/</guid>
      <description>JupyterLab对于Jupyter Notebook有着完全的支持 JupyterLab是一个交互式的开发环境，是jupyter notebook的下一代产品，集成了更多的功能，等其正式版发布，相信那时就是jupyter notebook被取代的时候 通过使用JupyterLab，能够</description>
    </item>
    
    <item>
      <title>以Ruia为例：如何实现一个Python爬虫框架</title>
      <link>https://www.howie6879.com/post/2019/03_how_to_build_a_web_scraping_framework_with_python/</link>
      <pubDate>Fri, 15 Mar 2019 08:37:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/03_how_to_build_a_web_scraping_framework_with_python/</guid>
      <description>这篇文章的题目有点大，但这并不是说我自觉对Python爬虫这块有多大见解，我只不过是想将自己的一些经验付诸于笔，对于如何写一个爬虫框架，我想一步一步地结合具体代码来讲述如何从零开始编写一个自己的爬虫框架 2018年到如今，我花精力比较多的一个开源项目算是Ruia了，这是一个基于Py</description>
    </item>
    
    <item>
      <title>谈谈对Python爬虫的理解</title>
      <link>https://www.howie6879.com/post/2019/02_talk_about_python_spider/</link>
      <pubDate>Thu, 10 Jan 2019 08:37:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/02_talk_about_python_spider/</guid>
      <description>谈谈对Python爬虫的理解 爬虫也可以称为Python爬虫 不知从何时起，Python这门语言和爬虫就像一对恋人，二者如胶似漆 ，形影不离，你中有我、我中有你，一提起爬虫，就会想到Python，一说起Python，就会想到人工智能……和爬虫 所以，一般说爬虫的时候，大部分程序员潜意识里</description>
    </item>
    
    <item>
      <title>神经网络基础</title>
      <link>https://www.howie6879.com/post/2019/01_neural_network_foundation/</link>
      <pubDate>Thu, 03 Jan 2019 08:37:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/01_neural_network_foundation/</guid>
      <description>要想入门以及往下理解深度学习，其中一些概念可能是无法避免地需要你理解一番，比如，备份地址： 什么是感知器 什么是神经网络 张量以及运算 微分 梯度下降 带着问题出发 在开始之前希望你有一点机器学习方面的知识，解决问题的前提是提出问题，我们提出这样一个问题，对MNIST数据集进行分析，然后在解决</description>
    </item>
    
    <item>
      <title>读 Character-level CNN for Text Classiﬁcation</title>
      <link>https://www.howie6879.com/post/2019/00_character-level_cnn_for_text_classi%EF%AC%81cation/</link>
      <pubDate>Thu, 03 Jan 2019 08:37:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2019/00_character-level_cnn_for_text_classi%EF%AC%81cation/</guid>
      <description>这篇论文提供了一个关于字符级卷积网络(ConvNets)在文本分类中应用实证研究，我们构建了几个大型数据集，以表明字符级卷积网络可以实现最先进的或竞争性的结果，针对传统模型（如词袋，n-gram及其TFIDF变体）和深度学习模型（如基于单词的ConvNets和循环神经网络）进行比</description>
    </item>
    
    <item>
      <title>如何用PEP 8编写优雅的Python代码</title>
      <link>https://www.howie6879.com/post/2018/08_how-to-write-beautiful-python-code-with-pep-8/</link>
      <pubDate>Wed, 26 Dec 2018 09:07:56 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/08_how-to-write-beautiful-python-code-with-pep-8/</guid>
      <description>原文地址：How to Write Beautiful Python Code With PEP 8 作者：Jasmine Finer 翻译：howie6879 PEP 8有时候读作PEP8 或者PEP-8，是一份提供如何编写Python代码指南和最佳实践的文档，由Guido van Rossum, Barry Warsaw, Nick Coghlan在2001年完成。PEP 8主要注重于提高 Python 代码的可读性和一致性。 PEP全</description>
    </item>
    
    <item>
      <title>如何用Python创建一个简单的神经网络</title>
      <link>https://www.howie6879.com/post/2018/07_how-to-create-asimple-neural-network-in-python/</link>
      <pubDate>Thu, 13 Dec 2018 16:03:05 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/07_how-to-create-asimple-neural-network-in-python/</guid>
      <description>如何用Python创建一个简单的神经网络 原文地址：How to Create a Simple Neural Network in Python 作者：Dr. Michael J. Garbade 翻译：howie6879 理解神经网络如何工作的最好方式是自己动手创建一个，这篇文章将会给你演示怎么做到这一点 神经网络(NN)，也称之为人工神经网络(ANN)，它是机器学习领域中学习算法集合中</description>
    </item>
    
    <item>
      <title>统计学习方法笔记：3.k近邻法</title>
      <link>https://www.howie6879.com/post/2018/06_39/</link>
      <pubDate>Sat, 29 Sep 2018 17:54:42 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/06_39/</guid>
      <description>这是我参加mlhub123组织的书籍共读计划的读书笔记，活动见mlhub第一期读书计划 阅读章节：第三章：k近邻法 开始时间：2018-09-29 结束时间：2018-10-23（比较忙） 目标：读完第三章，掌握基本概念，产出一篇笔记 博客地址 k近邻法（k-nearest neighbor，</description>
    </item>
    
    <item>
      <title>统计学习方法笔记：2.感知机</title>
      <link>https://www.howie6879.com/post/2018/05_38/</link>
      <pubDate>Tue, 18 Sep 2018 17:54:42 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/05_38/</guid>
      <description>这是我参加mlhub123组织的书籍共读计划的读书笔记，活动见mlhub第一期读书计划 阅读章节：第二章：感知机 开始时间：2018-09-18 结束时间：2018-09-21 目标：读完第二章，掌握基本概念，产出一篇笔记 博客地址 本章主要介绍了二类分类的线性分类模型：感知机： 感知机模型 感</description>
    </item>
    
    <item>
      <title>统计学习方法笔记：1.统计学习方法概论</title>
      <link>https://www.howie6879.com/post/2018/04_37/</link>
      <pubDate>Sun, 16 Sep 2018 17:54:42 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/04_37/</guid>
      <description>这是我参加mlhub123组织的书籍共读计划的读书笔记，活动见mlhub第一期读书计划 阅读章节：第一章：统计学习方法概论 开始时间：2018-09-14 结束时间：2018-09-16 目标：读完第一章，掌握基本概念，产出一篇笔记 博客地址 第一章主要对全书内容做了一个内容的概括： 统计学习</description>
    </item>
    
    <item>
      <title>博客升级HTTPS方案</title>
      <link>https://www.howie6879.com/post/2018/03_update-https-for-blog/</link>
      <pubDate>Thu, 24 May 2018 11:40:18 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/03_update-https-for-blog/</guid>
      <description>很早就想将博客升级为HTTPS，在心中也确立了方案，步骤也很简单： 博文上传至Git Caddy结合Webhook自动更新，顺便上HTTPS 流程很简单，麻烦在于需要Caddy以及Webhook的设置，然后一台服务器也是必须的，这里本人推荐使用搬瓦工的年付19.9$方案，购买之后，选择</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 6.常用的技巧</title>
      <link>https://www.howie6879.com/post/2018/02_sanic-for-pythoneer-06/</link>
      <pubDate>Sat, 13 Jan 2018 19:12:30 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/02_sanic-for-pythoneer-06/</guid>
      <description>结合前面讲的配置、项目结构、页面渲染、数据库连接，构造一个优雅的Sanic应用对你来说估计没什么大问题了，但是在实际使用过程中，可能你会碰到各种各样的需求，与之对应，你也会遇到千奇百怪的问题，除了在官方pro提issue，你大部分问题都需要自己去面对，看官方的介绍大概就可以明白S</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 5.数据库使用</title>
      <link>https://www.howie6879.com/post/2018/01_sanic-for-pythoneer-05/</link>
      <pubDate>Fri, 12 Jan 2018 10:50:30 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/01_sanic-for-pythoneer-05/</guid>
      <description>介绍中说的很明白，Sanic 是一个可以使用 async/await 语法编写项目的异步非阻塞框架，既然是异步框架，那么在使用过程中用到的第三方包也最好是异步的，比如http请求，最好就使用aihttp而非requests，对于数据库的连接，也是同样如此，下面我将用代码的形式来说明下如何在Sanic中连接</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 4.展示一个页面</title>
      <link>https://www.howie6879.com/post/2018/00_sanic-for-pythoneer-04/</link>
      <pubDate>Fri, 05 Jan 2018 09:20:14 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/00_sanic-for-pythoneer-04/</guid>
      <description>前面一节介绍项目结构的时候，很粗略地讲了下如何将rss的文章内容在网页上进行展示。 相信你应该已经了解清楚，sanic是怎么接收请求并返回被请求的资源的，简单来说概括如下： 接收请求 找到对应的路由并执行路由对应的视图函数 Jinja2模板渲染返回视图 路由和视图函数 在此我假设你理解 python 中的</description>
    </item>
    
    <item>
      <title>Sanic 源码阅读 - 基于0.1.2</title>
      <link>https://www.howie6879.com/post/2017/15_sanic-for-pythoneer-source-code-read/</link>
      <pubDate>Wed, 20 Dec 2017 10:10:49 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/15_sanic-for-pythoneer-source-code-read/</guid>
      <description>Sanic是一个可以使用async/await语法编写项目的异步非阻塞框架，它写法类似于Flask，但使用了异步特性，而且还使用uvloop作为事件循环，其底层使用的是libuv，从而使 Sanic的速度优势更加明显。 如果你： 想深入了解Sanic，迫切想知道它的运行机制 直接阅读源码</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 3.项目结构</title>
      <link>https://www.howie6879.com/post/2017/14_sanic-for-pythoneer-03/</link>
      <pubDate>Fri, 06 Oct 2017 08:04:38 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/14_sanic-for-pythoneer-03/</guid>
      <description>一个项目，在最外层他们应该是一样的，至少需要有: 文件夹 说明 docs 项目文档说明 src/pro_name 项目名称 tests 测试用例 README.md 项目介绍 requirements.txt 该项目依赖的第三方库 …&amp;hellip; …&amp;hellip; 那接下来需要讨论的，就是 src 的内部结构该是什么样的呢？ 本章将写一个 rss 解析展示的项目用做演示。 2.1.普通的项目结构 一个普通</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 2.配置</title>
      <link>https://www.howie6879.com/post/2017/13_sanic-for-pythoneer-02/</link>
      <pubDate>Fri, 06 Oct 2017 08:04:29 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/13_sanic-for-pythoneer-02/</guid>
      <description>对于一个项目来说，配置是一个很严肃的问题，比如说：在开发环境和生产环境中，配置是不同的，那么一个项目该如何自由地在不同的配置环境中进行切换呢，思考下，然后带着答案或者疑问往下阅读。 新建文件夹 demo2 ，内部建立这样的文件结构： 1 2 3 4 5 demo02 ├── config │ ├── __init__.py │ └── config.py └── run.py 其中 run.py 内容如下</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 1.初使用</title>
      <link>https://www.howie6879.com/post/2017/12_sanic-for-pythoneer-01/</link>
      <pubDate>Fri, 06 Oct 2017 08:03:15 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/12_sanic-for-pythoneer-01/</guid>
      <description>在安装Sanic之前，让我们一起来看看Python在支持异步的过程中，都经历了哪些比较重大的更新。 首先是Python3.4版本引入了asyncio，这让Python有了支持异步IO的标准库，而后3.5版本又提供了两个新的关键字 async/await，目的是为了更好地标识异步IO，</description>
    </item>
    
    <item>
      <title>2.Docker - 实例演示 - owllook</title>
      <link>https://www.howie6879.com/post/2017/11_27/</link>
      <pubDate>Tue, 22 Aug 2017 20:18:06 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/11_27/</guid>
      <description>上一篇笔记1.Docker - 初使用 主要介绍了Docker的安装以及一个简单的运行例子，本次笔记主要通过具体的实例来介绍一些Docker镜像以及容器的基本操作 1.目标 之前的毕设owllook是用python编写的，我将它开源在github上，正借此机会，将其制作成Docker镜像，</description>
    </item>
    
    <item>
      <title>1.Docker - 初使用</title>
      <link>https://www.howie6879.com/post/2017/10_26/</link>
      <pubDate>Tue, 15 Aug 2017 20:13:30 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/10_26/</guid>
      <description>自己很少使用Docker，也没有机会使用，毕业开始工作后，进的公司使用Docker进行部署，这是我的一些笔记，以便翻阅。 1.准备 系统：ubuntu16.04 or centos &amp;hellip; 1.1.安装 1.1.1.ubuntu16.04 首先安装依赖包，在终端输入： 1 2 sudo apt-get update sudo apt-get install apt-transport-https ca-certificates 安装Docker，自动安装脚本提供了非常简洁的安装方式：</description>
    </item>
    
    <item>
      <title>gRPC使用初试</title>
      <link>https://www.howie6879.com/post/2017/09_grpc-demo/</link>
      <pubDate>Thu, 03 Aug 2017 20:57:28 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/09_grpc-demo/</guid>
      <description>1.前言 gRPC是一个开源的高性能并且能在任何环境中运行的RPC框架，其采用 protocol buffer: protocol buffer是一个用于结构化数据序列化的一个灵活的、有效率的自动化机制，类似于XML(但比其更简单、小巧且简单)，对于某个服务需要定义的数据结构，可以使用protocol buffer(proto3)</description>
    </item>
    
    <item>
      <title>talospider - 简单的爬虫框架</title>
      <link>https://www.howie6879.com/post/2017/08_talospider-intro/</link>
      <pubDate>Wed, 07 Jun 2017 23:56:08 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/08_talospider-intro/</guid>
      <description>为什么写这个？ 一些简单的页面，无需用比较大的框架来进行爬取，自己纯手写又比较麻烦 因此针对这个需求写了talospider: 1.针对单页面的item提取 - 具体介绍点这里 2.spider模块 - 具体介绍点这里 介绍&amp;amp;&amp;amp;使用 item 这个模块是可以独立使用的，对于一些请求比较简单的</description>
    </item>
    
    <item>
      <title>owllook -- 一个简洁的网络小说搜索引擎</title>
      <link>https://www.howie6879.com/post/2017/07_owllook-intro/</link>
      <pubDate>Fri, 10 Mar 2017 19:09:50 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/07_owllook-intro/</guid>
      <description>前言 上一篇介绍了自己在使用sanic过程中遇到的一些问题，这次就想介绍下这个owllook，上面是演示demo，具体可以见https://www.owllook.net/ 本项目纯属共享学习之用，不得用于商业！ 首先我想说下目前的项目进度： v0.1.0： 小说的基本搜索解析功能 搜索记录</description>
    </item>
    
    <item>
      <title>sanic使用记录</title>
      <link>https://www.howie6879.com/post/2017/06_sanic-usage-record/</link>
      <pubDate>Tue, 28 Feb 2017 16:33:44 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/06_sanic-usage-record/</guid>
      <description>&lt;p&gt;在使用python异步的时候，我了解到了sanic这个据说是最快的web服务框架，其支持异步请求处理机制，这意味你可以使用python3.5的&lt;code&gt;async/await&lt;/code&gt;来编写无阻塞的异步程序。
于是我利用业余时间使用&lt;a href=&#34;https://github.com/channelcat/sanic&#34;&gt;sanic&lt;/a&gt;编写了这个项目。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vscode搭建haskell环境</title>
      <link>https://www.howie6879.com/post/2017/05_build-vs-code-env-for-haskell/</link>
      <pubDate>Sat, 11 Feb 2017 14:58:20 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/05_build-vs-code-env-for-haskell/</guid>
      <description>前言 An advanced, purely functional programming language 为什么学习这门语言，现在我也讲不清楚，但如官网所说：这个是一门高级的纯函数式编程语言，本人也是刚刚接触，在此记录下使用vscode搭建环境的过程。 安装 具体安装的话看这里就好，本人使用mac，经过后面的折腾，我建议直接安装stack，这个一些特性可以看下面： Installing GHC automatically, in</description>
    </item>
    
    <item>
      <title>CentOS7下使用Privoxy将socket5转http代理</title>
      <link>https://www.howie6879.com/post/2017/04_19/</link>
      <pubDate>Thu, 09 Feb 2017 15:59:44 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/04_19/</guid>
      <description>shadowsocks是一个socket5的服务，对此，可以使用Privoxy将其转化为http 部署shadowsocks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # 安装 pip install shadowsocks # 创建配置文件 vim /etc/shadowsocks.json # 输入 { &amp;#34;server&amp;#34;: &amp;#34;*.*.*.*&amp;#34;, &amp;#34;server_port&amp;#34;: 443, &amp;#34;password&amp;#34;: &amp;#34;***&amp;#34;, &amp;#34;method&amp;#34;: &amp;#34;aes-256-cfb&amp;#34;, &amp;#34;local_address&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;local_port&amp;#34;: 1080, &amp;#34;workers&amp;#34;: 1 } # 运行 sslocal -c /etc/shadowsocks.json # 测试当前ip curl --socks5 127.0.0.1:1080 http://httpbin.org/ip #返回结果 {</description>
    </item>
    
    <item>
      <title>如今的生活—2017</title>
      <link>https://www.howie6879.com/post/2017/03_life-2017/</link>
      <pubDate>Sun, 29 Jan 2017 21:03:28 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/03_life-2017/</guid>
      <description>高三时候，为了写作文 背了这么一句话 生活如同一朵玫瑰，每瓣花代表一根梦想，每根刺代表一个现实 差不多已是三年过去 刺不多，花香犹存 2017年对我来说是具有挑战的一年 我即将毕业 有以下愿景我希望能实现 温饱、进步、健康、爱 读书、代码、拿得出手的东西 16年大三暑假我就从学校跑了出来，毕业照回去</description>
    </item>
    
    <item>
      <title>Mastering Python 01</title>
      <link>https://www.howie6879.com/post/2017/02_16/</link>
      <pubDate>Fri, 27 Jan 2017 10:20:31 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/02_16/</guid>
      <description>1.准备 1.说明：《Mastering Python》读书笔记 2.要求：首先，希望你是处在python3版本，然后拥有一个干净的虚拟环境更是必要。 3.virtualenv或者anaconda都是不错的选择 2.Pythonic Syntax, Common Pitfalls, and Style Guide 2.1.Pythonic code 对于python开发者，无不希望写出pythonic风格的代</description>
    </item>
    
    <item>
      <title>ITBooks—简单的书籍下载小工具</title>
      <link>https://www.howie6879.com/post/2017/01_itbooks/</link>
      <pubDate>Thu, 26 Jan 2017 23:07:42 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/01_itbooks/</guid>
      <description>1.前言 我有个习惯就是收藏一些书籍，比如说编程类的，总是会去某些网站刷刷，若有新书籍更新恰又是自己感兴趣的，自然会立马下载下来，写程序的都知道，编程书籍更新换代太快，国内的翻译的速度很难全面地跟上，对此，阅读国外的电子书籍是个途径。 很早就想写个书籍集成的脚本，本周女朋友回学校改论</description>
    </item>
    
    <item>
      <title>对于python抓取google搜索结果的一些了解</title>
      <link>https://www.howie6879.com/post/2017/00_about-google-result-with-python/</link>
      <pubDate>Wed, 25 Jan 2017 22:25:00 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/00_about-google-result-with-python/</guid>
      <description>大学时期博文 1.问题 目前主流的搜索引擎，非google莫属，但其对于非法（流量异常、爬虫）请求的封锁也是异常严厉 本人前段时间有个脚本用到了谷歌搜索，具体见python之由公司名推算出公司官网(余弦相似度)当时直接使用的是一个python开源项目 但在使用过程中，单ip的情况下爬取速</description>
    </item>
    
    <item>
      <title>Mastering Pandas 01</title>
      <link>https://www.howie6879.com/post/2016/10_mastering-pandas01/</link>
      <pubDate>Mon, 21 Nov 2016 14:23:27 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/10_mastering-pandas01/</guid>
      <description>1.pandas特性 对于python开发者来说，在面对海量数据时，pandas可谓是数据分析的首选，以下关键特性是它如此热门的原因： 1. 可以处理各种不同格式的数据集：时间序列，表格，矩阵数据 2. 促进csv、DB/SQL等来源数据的加载/导入 3. 可以在很大数据集的基础上进行一些过滤、合并</description>
    </item>
    
    <item>
      <title>CentOS7分布式部署pyspider</title>
      <link>https://www.howie6879.com/post/2016/09_deploy-pyspider/</link>
      <pubDate>Mon, 10 Oct 2016 17:33:51 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/09_deploy-pyspider/</guid>
      <description>搭建环境： 系统版本：Linux centos-linux.shared 3.10.0-123.el7.x86_64 #1 SMP Mon Jun 30 12:09:22 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux python版本：Python 3.5.1 搭建python3环境： 本人在尝试过后选择集成环境Anaconda 编译 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 下载依赖 yum install -y ncurses-devel openssl openssl-devel zlib-devel gcc make glibc-devel libffi-devel glibc-static glibc-utils sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-deve # 下载pyth</description>
    </item>
    
    <item>
      <title>祝你生日快乐</title>
      <link>https://www.howie6879.com/post/2016/08_happy-birthday-to-my-girlfriend/</link>
      <pubDate>Thu, 29 Sep 2016 22:28:16 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/08_happy-birthday-to-my-girlfriend/</guid>
      <description>很荣幸，能将你写到我的生命里 生命不过百年，你我相识六年有余 记忆中我为你过了四次生日，高一、大一、大二、大三 第五次，祝你生日快乐 这次却有些不同，因为我们相爱了，我可以加上一句，我爱你 或许有些矫情，可在这夜晚中我毫不介意 我爱你 如果把生命想象成一条线，我们早已经在某个点相交，然后相互环</description>
    </item>
    
    <item>
      <title>Python之由公司名推算出公司官网(余弦相似度)</title>
      <link>https://www.howie6879.com/post/2016/07_company-name-to-website/</link>
      <pubDate>Sun, 18 Sep 2016 20:38:22 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/07_company-name-to-website/</guid>
      <description>1.问题 对展会数据分类后，我的新任务是如何通过公司名、公司地址、国家等海关数据推断出该公司的官网网站（若官网不存在则不考虑） 以下数据仅供参考： 公司名 国家 地址 JPW INDUSTRIES INC 427 NEW SANFORD RD LAVERGNE TN 37086 US Fujian Xishi Co., Ltd CN, CHINA BusinessPartner Co.,ltd BENKAI Co.,Ltd GOLD INC 18245 E 40TH AVE AURORA CO 80011 US 需要得到结果： 公司名 官方网站 JPW INDUSTRIES INC http://http://www.jpwindustries.com/ Fujian Xishi Co., Ltd http://www.xishigroup.com/ BusinessPartner Co.,ltd http://www.traderthailand.com/ BENKAI Co.,Ltd http://www.benkaico.com GOLD INC</description>
    </item>
    
    <item>
      <title>Python之朴素贝叶斯对展会数据分类</title>
      <link>https://www.howie6879.com/post/2016/06_python-naive-bayes-classification-of-exhibition-data/</link>
      <pubDate>Thu, 08 Sep 2016 20:34:40 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/06_python-naive-bayes-classification-of-exhibition-data/</guid>
      <description>目的 在公司实习，分别从国内国外两个网站爬取了一些展会数据，在数据处理上目前需要将其按照各个类别分类好，并提供对应展会地址的经纬度，国内数据如下： 国内数据比较少，占四百多条，在类别上来看有所属行业这一列，所以比较好处理，国外数据就有些尴尬： 国外网站展会数据将近五万多条，跟分类有关的</description>
    </item>
    
    <item>
      <title>python之装饰器</title>
      <link>https://www.howie6879.com/post/2016/05_about-python-decorator/</link>
      <pubDate>Sun, 31 Jul 2016 20:24:53 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/05_about-python-decorator/</guid>
      <description>认识装饰器 在python中，对于一个函数，若想在其运行前后做点什么，那么装饰器是再好不过的选择，话不多说，上代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env # -*-coding:utf-8-*- # script: 01.py __author__ = &amp;#39;howie&amp;#39; from functools import wraps def decorator(func): @wraps(func) def wrapper(*args, **kwargs): print(&amp;#34;%s was called&amp;#34; % func.__name__) func(*args, **kwargs) return wrapper @decorator def hello(name=&amp;#34;howie&amp;#34;): print(&amp;#34;Hello %s!&amp;#34; % name) hello() outputs: hello was called Hello howie! 这段代码，初看之下，确实不是很理解，接下来一步一步分</description>
    </item>
    
    <item>
      <title>cx_Freeze打包py文件</title>
      <link>https://www.howie6879.com/post/2016/04_package-py-lib-with-cx_freeze/</link>
      <pubDate>Sun, 17 Apr 2016 20:30:57 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/04_package-py-lib-with-cx_freeze/</guid>
      <description>最近需要将python代码打包成exe，打包过程中出现了一些问题，特此记录，也顺便记录下cx_Freeze使用方法，留待日后查看。 首先进行下载，需要注意对应的版本号，比如本人使用python3.4，64位，故下载cx_Freeze-4.3.3.win-amd64-py3.4.ms</description>
    </item>
    
    <item>
      <title>MySQL基本操作命令汇总</title>
      <link>https://www.howie6879.com/post/2016/03_mysql-tutorial/</link>
      <pubDate>Sun, 27 Mar 2016 20:21:49 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/03_mysql-tutorial/</guid>
      <description>一、基本操作 对数据库以及表的一些基本操作 1-1.关于数据库 1 2 3 4 5 6 7 8 9 10 11 12 //创建数据库 create database h_test; //查看数据库 show databases; //查看数据库信息 show create database h_test; //修改数据库的编码，可使用上一条语句查看是否修改成功 alter database h_test default character set gbk collate gbk_bin; //删除数据库 drop database h_test; //综上，可以直接创建数据库且设置编码方式</description>
    </item>
    
    <item>
      <title>Markdown简明教程</title>
      <link>https://www.howie6879.com/post/2016/02_markdown-tutorial/</link>
      <pubDate>Fri, 04 Mar 2016 20:27:02 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/02_markdown-tutorial/</guid>
      <description>1.概述 本教程的目的是让你读完本教程后，能够使用Markdown来应付一些日常的书写；Markdown的目标是实现易读易写，在这里我觉得还要加上一点，那就是易学，既然易学，那为什么还要写教程呢？因为我必须让我女朋友也学会Markdown啊，哈哈。 参考： Markdown 语法说明 使用环境：可以自己</description>
    </item>
    
    <item>
      <title>快速将网页版简书打造成具有个人特色的简书桌面应用</title>
      <link>https://www.howie6879.com/post/2016/01_build-jianshu-app-with-chrome/</link>
      <pubDate>Tue, 01 Mar 2016 20:27:02 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2016/01_build-jianshu-app-with-chrome/</guid>
      <description>个人真正意义上第一篇技术博文，从输入到输出，离不开基本的基础积累。 近日对谷歌扩展以及应用很感兴趣，于是研究了下官方文档，特写此文记录一下，若有错误，敬请指教，如需转载，请说明出处。 1.技术需求 怎么用html css javascript这些前端技术来编写一个桌面应用，说到这，不得不说谷歌</description>
    </item>
    
  </channel>
</rss>
