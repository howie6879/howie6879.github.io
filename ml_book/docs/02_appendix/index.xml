<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第二部分：附录 on Kubernetes 学习之路</title>
    <link>https://www.howie6879.cn/k8s/docs/02_appendix/</link>
    <description>Recent content in 第二部分：附录 on Kubernetes 学习之路</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://www.howie6879.cn/k8s/docs/02_appendix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.howie6879.cn/k8s/docs/02_appendix/01.%E8%AF%91%E5%A6%82%E4%BD%95%E7%94%A8Python%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.cn/k8s/docs/02_appendix/01.%E8%AF%91%E5%A6%82%E4%BD%95%E7%94%A8Python%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</guid>
      <description>如何用Python创建一个简单的神经网络 #   原文地址：How to Create a Simple Neural Network in Python 作者：Dr. Michael J. Garbade 翻译：howie6879   理解神经网络如何工作的最好方式是自己动手创建一个，这篇文章将会给你演示怎么做到这一点
 神经网络(NN)，也称之为人工神经网络(ANN)，它是机器学习领域中学习算法集合中的子集，其核心概念略似生物神经网络的概念。
拥有五年以上经验的德国机器学习专家Andrey Bulezyuk说过：神经网络正在使机器学习发生革命性的巨变，因为他们能够跨越广泛的学科和行业来高效地建模复杂的抽象。
基本上，一个ANN由以下组件构成：
 输入层：接受传递数据 隐藏层 输出层 各层之间的权重 每个隐藏层都会有一个精心设计的激活函数，对于此教程，我们将会使用Sigmoid激活函数  神经网络的类型有很多，在这个项目中，我们准备创建一个前馈神经网络，此类型的ANN将会直接从前到后传递数据
训练前馈神经元往往需要反向传播，反向传播为神经网络提供了相应的输入和输出集合，输入数据在被传递到神经元的时候被处理，然后产生一个输出
下面展示了一个简单的神经网络结构图：
而且，理解神经网络如何工作做好的办法就是去学习从头开始构建一个神经网络(不使用任何第三方库，作者意思应该是不使用任何机器学习库)。
在本文中，我们将演示如何使用Python编程语言创建一个简单的神经网络。
问题 #  这里用表格列出了我们需要解决的问题：
我们将会训练一个特定的神经网络模型，当提供一组新数据的时候，使其能够准确地预测输出值。
如你在表中所见，输出值总是等于输入数据的第一个值，因此我们期望的表中输出(?)值是1。
让我们思考看看能不能使用一些Python代码来给出相同的结果(再继续阅读之前，你可以在文章末尾仔细地阅读此项目的代码)
创建一个神经网络类 #  我们将在Python中创建一个NeuralNetwork类来训练神经元以提供准确的预测，该类还具有一些其他的辅助函数
尽管我们没有使用任何一个神经网络库用于这个简单的神经网络示例，我们也会导入numpy包来协助计算。
该库带有以下四个重要方法：
 exp：用于生成自然指数 array：用于生成矩阵 dot：用于乘法矩阵 random：用于生成随机数(注意：我们将对随机数进行播种以确保其有效分布)  应用 Sigmoid 激活函数 #  该神经网络将使用Sigmoid function作为激活函数，其绘制了一个典型的S形曲线：
此函数可以将任意值映射到区间0~1之间，它将帮助我们规范化输入值的和权重乘积之和。
随后，我们将创建Sigmoid函数的导数来帮助计算机对权重进行必要的调整。
一个Sigmoid函数的输出可以用来生成它的导数，例如，如果输出变量是X，那么它的导数将是x * (1-x)。
推导过程如下：</description>
    </item>
    
  </channel>
</rss>
