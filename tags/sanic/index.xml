<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sanic on 老胡的储物柜</title>
    <link>https://www.howie6879.com/tags/sanic/</link>
    <description>Recent content in Sanic on 老胡的储物柜</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 13 Jan 2018 19:12:30 +0800</lastBuildDate><atom:link href="https://www.howie6879.com/tags/sanic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sanic 使用教程 - 6.常用的技巧</title>
      <link>https://www.howie6879.com/post/2018/02_sanic-for-pythoneer-06/</link>
      <pubDate>Sat, 13 Jan 2018 19:12:30 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/02_sanic-for-pythoneer-06/</guid>
      <description>结合前面讲的配置、项目结构、页面渲染、数据库连接，构造一个优雅的Sanic应用对你来说估计没什么大问题了，但是在实际使用过程中，可能你会碰到各种各样的需求，与之对应，你也会遇到千奇百怪的问题，除了在官方pro提issue，你大部分问题都需要自己去面对，看官方的介绍大概就可以明白S</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 5.数据库使用</title>
      <link>https://www.howie6879.com/post/2018/01_sanic-for-pythoneer-05/</link>
      <pubDate>Fri, 12 Jan 2018 10:50:30 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/01_sanic-for-pythoneer-05/</guid>
      <description>介绍中说的很明白，Sanic 是一个可以使用 async/await 语法编写项目的异步非阻塞框架，既然是异步框架，那么在使用过程中用到的第三方包也最好是异步的，比如http请求，最好就使用aihttp而非requests，对于数据库的连接，也是同样如此，下面我将用代码的形式来说明下如何在Sanic中连接</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 4.展示一个页面</title>
      <link>https://www.howie6879.com/post/2018/00_sanic-for-pythoneer-04/</link>
      <pubDate>Fri, 05 Jan 2018 09:20:14 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2018/00_sanic-for-pythoneer-04/</guid>
      <description>前面一节介绍项目结构的时候，很粗略地讲了下如何将rss的文章内容在网页上进行展示。 相信你应该已经了解清楚，sanic是怎么接收请求并返回被请求的资源的，简单来说概括如下： 接收请求 找到对应的路由并执行路由对应的视图函数 Jinja2模板渲染返回视图 路由和视图函数 在此我假设你理解 python 中的</description>
    </item>
    
    <item>
      <title>Sanic 源码阅读 - 基于0.1.2</title>
      <link>https://www.howie6879.com/post/2017/15_sanic-for-pythoneer-source-code-read/</link>
      <pubDate>Wed, 20 Dec 2017 10:10:49 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/15_sanic-for-pythoneer-source-code-read/</guid>
      <description>Sanic是一个可以使用async/await语法编写项目的异步非阻塞框架，它写法类似于Flask，但使用了异步特性，而且还使用uvloop作为事件循环，其底层使用的是libuv，从而使 Sanic的速度优势更加明显。 如果你： 想深入了解Sanic，迫切想知道它的运行机制 直接阅读源码</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 3.项目结构</title>
      <link>https://www.howie6879.com/post/2017/14_sanic-for-pythoneer-03/</link>
      <pubDate>Fri, 06 Oct 2017 08:04:38 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/14_sanic-for-pythoneer-03/</guid>
      <description>一个项目，在最外层他们应该是一样的，至少需要有: 文件夹 说明 docs 项目文档说明 src/pro_name 项目名称 tests 测试用例 README.md 项目介绍 requirements.txt 该项目依赖的第三方库 …&amp;hellip; …&amp;hellip; 那接下来需要讨论的，就是 src 的内部结构该是什么样的呢？ 本章将写一个 rss 解析展示的项目用做演示。 2.1.普通的项目结构 一个普通</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 2.配置</title>
      <link>https://www.howie6879.com/post/2017/13_sanic-for-pythoneer-02/</link>
      <pubDate>Fri, 06 Oct 2017 08:04:29 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/13_sanic-for-pythoneer-02/</guid>
      <description>对于一个项目来说，配置是一个很严肃的问题，比如说：在开发环境和生产环境中，配置是不同的，那么一个项目该如何自由地在不同的配置环境中进行切换呢，思考下，然后带着答案或者疑问往下阅读。 新建文件夹 demo2 ，内部建立这样的文件结构： 1 2 3 4 5 demo02 ├── config │ ├── __init__.py │ └── config.py └── run.py 其中 run.py 内容如下</description>
    </item>
    
    <item>
      <title>Sanic 使用教程 - 1.初使用</title>
      <link>https://www.howie6879.com/post/2017/12_sanic-for-pythoneer-01/</link>
      <pubDate>Fri, 06 Oct 2017 08:03:15 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/12_sanic-for-pythoneer-01/</guid>
      <description>在安装Sanic之前，让我们一起来看看Python在支持异步的过程中，都经历了哪些比较重大的更新。 首先是Python3.4版本引入了asyncio，这让Python有了支持异步IO的标准库，而后3.5版本又提供了两个新的关键字 async/await，目的是为了更好地标识异步IO，</description>
    </item>
    
    <item>
      <title>owllook -- 一个简洁的网络小说搜索引擎</title>
      <link>https://www.howie6879.com/post/2017/07_owllook-intro/</link>
      <pubDate>Fri, 10 Mar 2017 19:09:50 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/07_owllook-intro/</guid>
      <description>前言 上一篇介绍了自己在使用sanic过程中遇到的一些问题，这次就想介绍下这个owllook，上面是演示demo，具体可以见https://www.owllook.net/ 本项目纯属共享学习之用，不得用于商业！ 首先我想说下目前的项目进度： v0.1.0： 小说的基本搜索解析功能 搜索记录</description>
    </item>
    
    <item>
      <title>sanic使用记录</title>
      <link>https://www.howie6879.com/post/2017/06_sanic-usage-record/</link>
      <pubDate>Tue, 28 Feb 2017 16:33:44 +0000</pubDate>
      
      <guid>https://www.howie6879.com/post/2017/06_sanic-usage-record/</guid>
      <description>&lt;p&gt;在使用python异步的时候，我了解到了sanic这个据说是最快的web服务框架，其支持异步请求处理机制，这意味你可以使用python3.5的&lt;code&gt;async/await&lt;/code&gt;来编写无阻塞的异步程序。
于是我利用业余时间使用&lt;a href=&#34;https://github.com/channelcat/sanic&#34;&gt;sanic&lt;/a&gt;编写了这个项目。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
