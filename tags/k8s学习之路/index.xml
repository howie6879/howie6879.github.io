<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s学习之路 on 老胡的储物柜</title>
    <link>https://www.howie6879.com/tags/k8s%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</link>
    <description>Recent content in k8s学习之路 on 老胡的储物柜</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 18 Mar 2021 20:35:47 +0800</lastBuildDate><atom:link href="https://www.howie6879.com/tags/k8s%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s学习之路.基础.[04.配置应用程序]</title>
      <link>https://www.howie6879.com/post/2021/07_k8s_note_04_configmap/</link>
      <pubDate>Thu, 18 Mar 2021 20:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/07_k8s_note_04_configmap/</guid>
      <description>使用Docker部署应用程序时，一般常用的配置方式有： 配置内嵌 启动传参配置 环境变量 经过前面容器持久化存储的介绍，我们很容易能想到是以挂载卷的形式，比如： gitRepo hostPath NFS 再结合边车模式来进行配置文件的管控是可行的，然而有一种更加简便的方法能将配置数据置于Kubernetes的顶级资源对象中，</description>
    </item>
    
    <item>
      <title>设计模式——基于容器的分布式系统</title>
      <link>https://www.howie6879.com/post/2021/06_design_patterns_for_container-based_distributed_systems/</link>
      <pubDate>Thu, 11 Mar 2021 22:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/06_design_patterns_for_container-based_distributed_systems/</guid>
      <description>20世纪80年代末至90年代初，面向对象编程思想给软件开发带来了一轮技术革新，就像润物细无声的春雨那般，向全世界的程序员们快速普及了模块化构建应用程序的方法，一直流行至今。 当下，我们可以看到类似的革新出现在了分布式系统开发，具体特点如下： 基于容器的微服务架构体系日益流行 容器天然隔</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[03.容器持久化存储]</title>
      <link>https://www.howie6879.com/post/2021/05_k8s_note_03_container_persistence/</link>
      <pubDate>Thu, 04 Mar 2021 22:35:47 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/05_k8s_note_03_container_persistence/</guid>
      <description>容器的本质是进程，对于进程，Linux系统有进程组的概念来将其组织在一起。在k8s里面，使用Pod这个逻辑概念来维护容器间的关系。 有了Pod后，我们的应用程序需要被创建和管理，这就引出了ReplicaSet和Deployment；然后需要将部署好的应用暴露给外部进行访问，Serv</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[02.概念介绍]</title>
      <link>https://www.howie6879.com/post/2021/02_k8s_note_02_basic_concept/</link>
      <pubDate>Mon, 11 Jan 2021 22:17:08 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/02_k8s_note_02_basic_concept/</guid>
      <description>俗话说，磨刀不误砍柴工。上一章，我们成功搭建了k8s集群，接下来我们主要花时间了解一下k8s的相关概念，为后续掌握更高级的知识提前做好准备。 本文主要讲解以下四个概念： Pod Deployment Service Namespace 引入 让我们使用Deployment运行一个无状态应用来开启此章节吧，比如运行一个nginx Deployme</description>
    </item>
    
    <item>
      <title>k8s学习之路.基础.[01.走进Kubernetes]</title>
      <link>https://www.howie6879.com/post/2021/01_k8s_note_01_installation/</link>
      <pubDate>Mon, 11 Jan 2021 22:16:42 +0800</pubDate>
      
      <guid>https://www.howie6879.com/post/2021/01_k8s_note_01_installation/</guid>
      <description>什么是Kubernetes 随着微服务架构被越来越多的公司使用，大部分单体应用正逐步被拆解成小的、独立运行的微服务。微服务的优势这里不做探讨，但是其带来的服务维护问题大大增加，若想要在管理大量微服务的情况下还需要让资源利用率更多且硬件成本相对更低，那么基于容器部署的微服务的一些自动</description>
    </item>
    
  </channel>
</rss>
