<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第二部分：附录 on Sanic-For-Pythoneer</title>
    <link>https://www.howie6879.cn/sanic_book/docs/02_appendix/</link>
    <description>Recent content in 第二部分：附录 on Sanic-For-Pythoneer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://www.howie6879.cn/sanic_book/docs/02_appendix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.howie6879.cn/sanic_book/docs/02_appendix/Sanic%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9F%BA%E4%BA%8E0.1.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.cn/sanic_book/docs/02_appendix/Sanic%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9F%BA%E4%BA%8E0.1.2/</guid>
      <description>Sanic源码阅读：基于0.1.2 #  Sanic是一个可以使用async/await语法编写项目的异步非阻塞框架，它写法类似于Flask，但使用了异步特性，而且还使用uvloop作为事件循环，其底层使用的是libuv，从而使 Sanic的速度优势更加明显。
本章，我将和大家一起看看Sanic里面的运行机制是怎样的，它的Router Blueprint等是如何实现的。
如果你有以下的需求：
 想深入了解Sanic，迫切想知道它的运行机制 直接阅读源码，做一些定制 学习  将Sanic-0.1.2阅读完后的一些建议，我觉得你应该有以下基础再阅读源码才会理解地比较好：
 理解装饰器，见附录 理解协程  Sanic-0.1.2 的核心文件如下：
. ├── __init__.py ├── blueprints.py ├── config.py ├── exceptions.py ├── log.py ├── request.py ├── response.py ├── router.py ├── sanic.py ├── server.py └── utils.py 通过运行下面的示例，这些文件都会被我们看到它的作用，拭目以待吧，为了方便诸位的理解，我已将我注解的一份Sanic代码上传到了github，见sanic_annotation。
simple_server.py #  让我们从simple_server开始吧，代码如下：
from sanic_0_1_2.src import Sanic from sanic_0_1_2.src.response import json app = Sanic(__name__) @app.route(&amp;#34;/&amp;#34;) async def test(request): return json({&amp;#34;test&amp;#34;: True}) app.run(host=&amp;#34;0.0.0.0&amp;#34;, port=8000) 或许你直接把sanic_annotation项目直接clone到本地比较方便调试+理解：
git clone https://github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.howie6879.cn/sanic_book/docs/02_appendix/%E5%85%B3%E4%BA%8E%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.cn/sanic_book/docs/02_appendix/%E5%85%B3%E4%BA%8E%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>附录：关于装饰器 #  认识装饰器 #  在python中，对于一个函数，若想在其运行前后做点什么，那么装饰器是再好不过的选择，这种语法在一些项目中十分常见，是Python语言的黑魔法，用处颇多，话不多说，让我们看一下代码：
#!/usr/bin/env # -*-coding:utf-8-*- # script: 01.py __author__ = &amp;#39;howie&amp;#39; from functools import wraps def decorator(func): @wraps(func) def wrapper(*args, **kwargs): print(&amp;#34;%swas called&amp;#34; % func.__name__) func(*args, **kwargs) return wrapper @decorator def hello(name=&amp;#34;howie&amp;#34;): print(&amp;#34;Hello %s!&amp;#34; % name) hello() outputs: hello was called Hello howie! 这段代码，初看之下，确实不是很理解，接下来一步一步分析，看看装饰器到底是怎么工作的。
装饰器原理 #  在python中，方法允许作为参数传递，想在某个函数执行前后加点料，也可以这样简单实现。
#!/usr/bin/env # -*-coding:utf-8-*- # script: 02-1.py __author__ = &amp;#39;howie&amp;#39; def decorator(func): print(&amp;#34;%swas called&amp;#34; % func.__name__) func() def hello(name=&amp;#34;howie&amp;#34;): print(&amp;#34;Hello %s!</description>
    </item>
    
  </channel>
</rss>
