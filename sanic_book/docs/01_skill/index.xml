<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第一部分：技巧 on Sanic-For-Pythoneer</title>
    <link>https://www.howie6879.com/sanic_book/docs/01_skill/</link>
    <description>Recent content in 第一部分：技巧 on Sanic-For-Pythoneer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://www.howie6879.com/sanic_book/docs/01_skill/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.howie6879.com/sanic_book/docs/01_skill/1.%E5%88%9D%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.com/sanic_book/docs/01_skill/1.%E5%88%9D%E4%BD%BF%E7%94%A8/</guid>
      <description>快速开始 # 在安装Sanic之前，让我们一起来看看Python在支持异步的过程中，都经历了哪些比较重大的更新。
首先是Python3.4版本引入了asyncio，这让Python有了支持异步IO的标准库，而后3.5版本又提供了两个新的关键字 async/await，目的是为了更好地标识异步IO，让异步编程看起来更加友好，最后3.6版本更进一步，推出了稳定版的asyncio，从这一系列的更新可以看出，Python社区正迈着坚定且稳重的步伐向异步编程靠近。
安装 # Sanic是一个支持 async/await 语法的异步无阻塞框架，这意味着我们可以依靠其处理异步请求的新特性来提升服务性能，如果你有Flask框架的使用经验，那么你可以迅速地使用Sanic来构建出心中想要的应用，并且性能会提升不少，我将同一服务分别用Flask和Sanic编写，再将压测的结果进行对比，发现Sanic编写的服务大概是Falsk的1.5倍。
仅仅是Sanic的异步特性就让它的速度得到这么大的提升么？是的，但这个答案并不标准，更为关键的是Sanic使用了uvloop作为asyncio的事件循环，uvloop由Cython编写，它的出现让asyncio更快，快到什么程度？这篇文章中有介绍，其中提出速度至少比 nodejs、gevent 和其他Python异步框架要快两倍，并且性能接近于用Go编写的程序，顺便一提，Sanic的作者就是受这篇文章影响，这才有了Sanic。
怎么样？有没有激起你学习Sanic的兴趣，如果有，就让我们一起开始学习吧，在开始之前，你只需要有一台安装了Python的电脑即可。
说明：由于Windows下暂不支持安装uvloop，故在此建议使用Mac或Linux
虚拟环境 # 程序世界一部分是对应着现实的，在生活中，我们会在不同的环境完成不同的任务，比如在厨房做饭、卧室休息，分工极其明确。
其实用Python编写应用服务也是如此，它们同样希望应用服务与开发环境是一对一的关系，这样做的好处在于，每个独立的环境都可以简洁高效地管理自身对应服务所依赖的第三方库，如若不然，各个服务都安排在同一环境，这样不仅会造成管理上的麻烦，还会使第三方库之间产生冲突。
通过上面的叙述，我们是不是可以得出这样一个核心观点：应该在不同的环境下做不同的事 ，以此类推，写项目的时候，我们也需要为每个不同的项目构建一个无干扰的的环境，发散思维，总结一下：
不同的项目，需要为其构建不同的虚拟环境，以免互相干扰
构建虚拟环境的工具很多，如下：
virtualenv pyenv anaconda …&amp;hellip;
以上三个工具都可以快速地帮助我们构建当前需要的Python环境，如果你之前没有使用过，可直接点开链接进行下载，如果你正在使用其它的环境管理工具，也不要紧，因为不论你使用哪一种方式，我们最终目的都是针对一个新项目构建一个新的环境。
安装配置好之后，简单看看官方提供的使用方法，就可以开始了，比如我本机使用的是anaconda ，安装完成后可以很方便地创建一个虚拟环境，比如这里使用Python3.6来作为本书项目的默认环境：
# 新建一个python3.6环境 conda create --name python36 python=3.6 # 安装好之后 输入下面命令进入名为python36的环境 source activate python36 若安装速度比较慢，可以考虑换国内源，比如 国内镜像 ，至于为什么选择python3.6作为默认环境，一是因为Sanic只支持Python3.5+，二则是我们构建的项目最终是要在生产环境下运行的，所以建议最好安装Python3.6下稳定版本的asyncio。
安装Sanic # Python安装第三方模块都是利用pip工具进行安装，这里也不例外，首先进入上一步我们新建的 python3.6 虚拟环境，然后安装：
# 安装Sanic，请先使用 source activate python36 进入虚拟环境 pip install sanic # 如果不想使用uvloop和ujson 可以这样安装 SANIC_NO_UVLOOP=true SANIC_NO_UJSON=true pip install sanic 通过上面的命令，你就可以在 python3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.howie6879.com/sanic_book/docs/01_skill/2.%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.com/sanic_book/docs/01_skill/2.%E9%85%8D%E7%BD%AE/</guid>
      <description>配置 # 对于一个项目来说，配置是一个很严肃的问题，比如说：在开发环境和生产环境中，配置是不同的，那么一个项目该如何自由地在不同的配置环境中进行切换呢，思考下，然后带着答案或者疑问往下阅读。
单一配置 # 撸起袖子，开始吧，新建文件夹 demo2 ，内部建立这样的文件结构：
demo02 ├── config │ ├── __init__.py │ └── config.py └── run.py 其中 run.py 内容如下：
#!/usr/bin/env python from sanic import Sanic from sanic.response import text app = Sanic() @app.route(&amp;#34;/&amp;#34;) async def test(request): return text(&amp;#39;Hello World!&amp;#39;) if __name__ == &amp;#34;__main__&amp;#34;: app.run(host=&amp;#34;0.0.0.0&amp;#34;, port=8000, debug=True) 代码示例中开启了 debug 模式，假设我们需要通过 config.py 配置文件来实现控制服务的 debug 模式开启与否，那该怎么实现呢。
在 config.py 中添加一行：DEBUG=True ，然后 run.py 内容改为：
#!/usr/bin/env python from sanic import Sanic from sanic.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.howie6879.com/sanic_book/docs/01_skill/3.%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.com/sanic_book/docs/01_skill/3.%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</guid>
      <description>项目结构 # 通过前面的讲解，我们了解了Sanic的运行方式以及编写一个好的配置方案，是不是想要立马编写一个应用练练手呢？别急，请先看完这一章节，了解一下你要写的应用得用什么样的结构。
在github上也看了不少的Python项目吧，相信你也清楚，一个项目，在最外层他们应该是一样的，简单概括下，大概是下面这样的结构:
pro_name ├── docs # 项目文档说明 ├── src or pro_name/# 项目名称 ├── tests # 测试用例 ├── README.md # 项目介绍 └──requirements.txt # 该项目依赖的第三方库 那接下来需要讨论的，就是 src 或者说pro_name（这个就看你心情命名了，一般与最外层一样的名字）的内部结构该是什么样的呢？
本章将写一个 rss 解析展示的项目用做演示。
普通的项目结构 # 一个普通的项目：
不需要添加后续模块功能 快速开发使用，不需要维护 无较复杂的前端需求 用完就走 那么就可以像 demo01 中一样，只需要添加一个 run.py 或者叫做 app.py 文件（反正这是一个启动文件，命名可随意），不论是配置、路由都写在一起就好了。
新建一个项目如下：
sample01 ├── docs │ └── demo.md ├── src │ └── run.py ├── tests ├── .gitignore └──requirements.txt 任意一个 rss 源，假设项目需要将其中的文章标题以及链接提取并展示出来，比如以json格式返回，这属于很简单的功能，可以说只有一段逻辑，run.py 内容如下：
#!/usr/bin/env python from sanic import Sanic from sanic.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.howie6879.com/sanic_book/docs/01_skill/4.%E5%B1%95%E7%A4%BA%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.com/sanic_book/docs/01_skill/4.%E5%B1%95%E7%A4%BA%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2/</guid>
      <description>展示一个页面 # 前面一章介绍项目结构的时候，很粗略地讲了下如何将rss的文章内容在网页上进行展示。
相信你应该已经了解清楚，sanic是怎么接收请求并返回被请求的资源的，简单来说概括如下：
接收请求 找到对应的路由并执行路由对应的视图函数 Jinja2模板渲染返回视图 路由和视图函数 # 在此我假设你理解 python 中的装饰器，如果你并不清楚，可以看我另写的关于装饰器的介绍，回归正题，还记得第一节中的代码实例么？
#!/usr/bin/env python from sanic import Sanic from sanic.response import text app = Sanic() # 此处将路由 / 与视图函数 test 关联起来 @app.route(&amp;#34;/&amp;#34;) async def test(request): return text(&amp;#39;Hello World!&amp;#39;) if __name__ == &amp;#34;__main__&amp;#34;: app.run(host=&amp;#34;0.0.0.0&amp;#34;, port=8000) 在前言介绍里，出现这几个名词 路由 视图函数 视图 ,在上面那段代码中，test 就是视图函数。
这是一段执行逻辑，比如客户端请求 0.0.0.0:8000/ 此时返回的内容就是由test 这个视图函数提供的。
在我看来，视图函数就是一个纽带，它起到承上启下的作用，那么，到底是怎样的承上启下呢？让我们结合代码(sanic0.1.2源码)来分析下：
@app.route(&amp;#34;/&amp;#34;) async def test(request): return text(&amp;#39;Hello World!&amp;#39;) 这个路由装饰器的作用很简单，就是将 / 这个 uri 与视图函数test关联起来，或许你可以将路由想象成一个 dict，当客户端若请求 0.0.0.0:8000/，路由就会get / 对应的视图函数test，然后执行。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.howie6879.com/sanic_book/docs/01_skill/5.%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.com/sanic_book/docs/01_skill/5.%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8/</guid>
      <description>数据库使用 # 介绍中说的很明白，Sanic 是一个可以使用 async/await 语法编写项目的异步非阻塞框架，既然是异步框架，那么在使用过程中用到的第三方包也最好是异步的，比如http请求，最好就使用aihttp而非requests，对于数据库的连接，也是同样如此，下面我将用代码的形式来说明下如何在Sanic中连接数据库。
操作Mysql # 对于mysql数据库的异步操作，我只在一些脚本中用过，用的是aiomysql，其中官方文档中讲得很清楚，也支持结合sqlalchemy编写ORM，然后aiomysql提供了自己编写的异步引擎。
from aiomysql.sa import create_engine # 这个才是关键 下面我编写一个具体的例子来用异步语句操作下数据库，首先建立如下目录：
aio_mysql ├── demo.py ├── model.py └── requirements.txt 建立表：
create database test_mysql; CREATE TABLE user ( id INT AUTO_INCREMENT PRIMARY KEY, user_name VARCHAR(16) NOT NULL, pwd VARCHAR(32) NOT NULL, real_name VARCHAR(6) NOT NULL ); 一切准备就绪，下面编写代码：
# script: model.py import sqlalchemy as sa metadata = sa.MetaData() user = sa.Table( &amp;#39;user&amp;#39;, metadata, sa.Column(&amp;#39;id&amp;#39;, sa.Integer, autoincrement=True, primary_key=True), sa.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.howie6879.com/sanic_book/docs/01_skill/6.%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.com/sanic_book/docs/01_skill/6.%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8A%80%E5%B7%A7/</guid>
      <description>常用的技巧 # 结合前面讲的配置、项目结构、页面渲染、数据库连接，构造一个优雅的Sanic应用对你来说估计没什么大问题了，但是在实际使用过程中，可能你会碰到各种各样的需求，与之对应，你也会遇到千奇百怪的问题，除了在官方pro提issue，你大部分问题都需要自己去面对，看官方的介绍：
Async Python 3.5+ web server that&amp;rsquo;s written to go fast
大概就可以明白Sanic框架的重心不会放在诸如session cache reload authorized这些问题上。
此篇我会将我遇到的一些问题以及解决方案一一记录下来，估计会持续更新，因为问题是不断的哈哈，可能有些问题与前面讲的有些重复，你大可略过，我将其总结成一些小技巧，供大家参考，具体如下：
api请求json参数以及api接口验证 gRPC的异步调用方式 Blueprint html&amp;amp;templates编写 cache 热加载 session 对于一些问题，我将编写一个小服务来演示这些技巧，具体见demo06，依旧使用前面rss的那个例子，经过修改一番后的rss例子现在目录变成这样子了，里面加了我遇到的各种问题的解决方案，或许你只需要关注你想要了解的就好，如果你有其他的问题，欢迎issue提问，目录大概如下所示：
src ├── config │ ├── __init__.py │ ├── config.py │ ├── dev_config.py │ └── pro_config.py ├── database │ ├── __init__.py │ └── redis_base ├── grpc_service │ ├── __init__.py │ ├── grpc_asyncio_client.py │ ├── grpc_client.py │ ├── grpc_server.py │ ├── hello_grpc.py │ ├── hello_pb2.py │ ├── hello_pb2_grpc.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.howie6879.com/sanic_book/docs/01_skill/7.%E5%8F%AF%E9%9D%A0%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.com/sanic_book/docs/01_skill/7.%E5%8F%AF%E9%9D%A0%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>可靠的扩展 # 目前开源社区有不少人为Sanic框架编写了插件，这些插件很可能会在将来的某个时间帮助到你，比如缓存、模板渲染、api文档生成、Session&amp;hellip;等等
官方也维护了一个扩展列表，见extensions</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.howie6879.com/sanic_book/docs/01_skill/8.%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.howie6879.com/sanic_book/docs/01_skill/8.%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%83%A8%E7%BD%B2/</guid>
      <description>测试与部署 # 在项目结构那一节说过，一个服务的基本结构大概是怎么样的，这里再列出来回顾下：
pro_name ├── docs # 项目文档说明 ├── src or pro_name/# 项目名称 ├── tests # 测试用例 ├── README.md # 项目介绍 └──requirements.txt # 该项目依赖的第三方库 一个服务编写完成后，在部署之前，你需要做的一步就是进行单元测试，首先你要确定目前的代码是可以完美运行的，然后测试用例还可以让你在下次修改代码逻辑进行版本迭代的时候，只要再跑一次对应的测试用例就可以快速地确定此次的版本依旧是完美的，大大节省时间，一般集成测试的时候都需要跑测试用例的脚本。
本次使用的例子还是继续在demo06的基础上进行演示，提醒一下诸位，在继续阅读前可以先大致看下目录中test的代码哈。
测试 # 单元测试 # Sanic进行单元测试的时候，官方推荐使用的是pytest，具体怎么对Sanic构建的服务进行测试呢，别急，Sanic开发团队提供了关于pytest的插件，见pytest-sanic，使用起来也是非常简单。
让我们结合前面的例子，利用pytest-sanic测试一下demo06中的rss api服务，先看下目录结构：
tests ├── setting.py └── test_rss.py 首先在setting.py中定好请求的数据：
# setting.py def rss_data(): return { &amp;#34;name&amp;#34;: &amp;#34;howie6879&amp;#34; } 然后编写对应的测试用例，这里是关于/v1/post/rss/的一个POST请求测试，代码如下：
# test_rss.py async def test_http_rss(test_cli): data = setting.rss_data() response = await test_cli.post(&amp;#39;/v1/post/rss/&amp;#39;, data=ujson.dumps(data)) resp_json = await response.json() assert resp_json[&amp;#39;status&amp;#39;] == 1 # 运行测试 pytest tests/test_rss.</description>
    </item>
    
  </channel>
</rss>
